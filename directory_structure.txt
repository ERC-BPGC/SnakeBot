üìÅsrc
    üìÅros_gz_example_description
        ‚îî‚îÄ‚îÄ package.xml
            Content:
            <?xml version="1.0"?>
            <?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
            <package format="3">
              <name>ros_gz_example_description</name>
              <version>0.0.0</version>
              <description>SDFormat description files for the ros_gz_example project</description>
              <maintainer email="michael@openrobotics.org">Michael Carroll</maintainer>
              <license>Apache 2.0</license>
              <author>Michael Carroll</author>
              <author>Dharini Dutia</author>
            
              <buildtool_depend>ament_cmake</buildtool_depend>
            
              <test_depend>ament_lint_auto</test_depend>
            
              <export>
                <build_type>ament_cmake</build_type>
              </export>
            </package>
            

        ‚îî‚îÄ‚îÄ CMakeLists.txt
            Content:
            cmake_minimum_required(VERSION 3.5)
            
            project(ros_gz_example_description)
            
            find_package(ament_cmake REQUIRED)
            
            if(BUILD_TESTING)
              find_package(ament_lint_auto REQUIRED)
              ament_lint_auto_find_test_dependencies()
            endif()
            
            install(
              DIRECTORY
                models/
              DESTINATION share/${PROJECT_NAME}/models
            )
            
            ament_environment_hooks("${CMAKE_CURRENT_SOURCE_DIR}/hooks/${PROJECT_NAME}.dsv.in")
            ament_environment_hooks("${CMAKE_CURRENT_SOURCE_DIR}/hooks/${PROJECT_NAME}.sh.in")
            
            ament_package()
            

        üìÅmodels
            üìÅsnakebot
                ‚îî‚îÄ‚îÄ snake_robot_wokrbale.xacro
                    Content:
                    <?xml version="1.0"?>
                    <robot name="snake_robot"
                      xmlns:xacro="http://ros.org/wiki/xacro">
                    
                      <!-- *************************************************************** -->
                      <!-- Material Definitions -->
                      <!-- *************************************************************** -->
                      <!-- Blue material definition for robot visualization -->
                      <material name="blue">
                        <color rgba="0 0 0.8 1" />
                      </material>
                      <xacro:property name="mesh_cross" value="package://ros_gz_example_description/models/snakebot/meshes/cross.stl" />
                      <xacro:property name="mesh_module" value="package://ros_gz_example_description/models/snakebot/meshes/module.stl" />
                    
                      <!-- Red material definition for robot visualization -->
                      <material name="red">
                        <color rgba="1 1 0.8 1" />
                      </material>
                    
                      <!-- *************************************************************** -->
                      <!-- Base Link Definition -->
                      <!-- *************************************************************** -->
                      <!-- Defines the base link of the robot with visual, collision, and inertial properties -->
                      <link name="base_footprint"> </link>
                    <joint name="body link joint" type="fixed">
                    <parent link="base_footprint"/>
                    <child link="base_link"/>
                    </joint>
                      <link name="base_link">
                        <visual>
                          <origin rpy="3.14159 0 0" xyz="0 0.528 0" />
                          <geometry>
                            <mesh filename="${mesh_module}" scale="0.010 0.010 0.010" />
                          </geometry>
                          <material name="blue" />
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="${mesh_module}" scale="0.010 0.010 0.010" />
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="0.0525" />
                          <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" />
                        </inertial>
                      </link>
                    
                      <!-- *************************************************************** -->
                      <!-- Macros Definitions -->
                      <!-- *************************************************************** -->
                      <!-- Macro for cross link definition -->
                      <xacro:macro name="cross" params="no">
                        <link name="cross${no}">
                          <visual>
                            <origin rpy="0 0 0" xyz="0.065 -0.558 0.065" />
                            <geometry>
                              <mesh filename="${mesh_cross}" scale="0.010 0.010 0.010" />
                            </geometry>
                            <material name="blue" />
                          </visual>
                          <collision>
                            <geometry>
                              <mesh filename="${mesh_cross}" scale="0.010 0.010 0.010" />
                            </geometry>
                          </collision>
                          <inertial>
                            <mass value="0.005" />
                            <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" />
                          </inertial>
                        </link>
                      </xacro:macro>
                    
                      <!-- Macro for vertical segment link definition -->
                      <xacro:macro name="segment_vertical" params="no">
                        <link name="segment${no}a">
                          <visual>
                            <origin rpy="0 0 3.14159" xyz="0.0 0 0" />
                            <geometry>
                              <mesh filename="${mesh_module}" scale="0.010 0.010 0.010" />
                            </geometry>
                            <material name="blue" />
                          </visual>
                          <collision>
                            <geometry>
                              <mesh filename="${mesh_module}" scale="0.010 0.010 0.010" />
                            </geometry>
                          </collision>
                          <inertial>
                            <mass value="0.0525" />
                            <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" />
                          </inertial>
                        </link>
                      </xacro:macro>
                    
                      <!-- Macro for horizontal segment link definition -->
                      <xacro:macro name="segment_horizontal" params="no">
                        <link name="segment${no}b">
                          <visual>
                            <origin rpy="0 1.5708 0" xyz="0.0 -0.558 0" />
                            <geometry>
                              <mesh filename="${mesh_module}" scale="0.010 0.010 0.010" />
                            </geometry>
                            <material name="red" />
                          </visual>
                          <collision>
                            <geometry>
                              <mesh filename="${mesh_module}" scale="0.010 0.010 0.010" />
                            </geometry>
                          </collision>
                          <inertial>
                            <mass value="0.0525" />
                            <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" />
                          </inertial>
                        </link>
                      </xacro:macro>
                    
                      <!-- Macro for horizontal joint definition -->
                      <xacro:macro name="joint_horizontal" params="no">
                        <joint name="joint${2 * no - 1}" type="revolute">
                          <parent link="cross${no}" />
                          <child link="segment${no}b" />
                          <origin rpy="0 0 0" xyz="0 0 0" />
                          <axis xyz="0 0 1" />
                          <limit effort="100" lower="-1.57" upper="1.57" velocity="1" />
                        </joint>
                      </xacro:macro>
                    
                      <!-- Macro for vertical joint definition -->
                      <xacro:macro name="joint_vertical" params="no">
                        <joint name="joint${2 * no}" type="revolute">
                          <parent link="segment${no}a" />
                          <child link="cross${no}" />
                          <origin rpy="0 0 0" xyz="0 -0.522 0" />
                          <axis xyz="1 0 0" />
                          <limit effort="100" lower="-1.57" upper="1.57" velocity="1" />
                        </joint>
                      </xacro:macro>
                    
                      <!-- Macro for fixed joint definition between segments -->
                      <xacro:macro name="joint_fixed" params="no">
                        <joint name="joint_fix_mod_${no}" type="fixed">
                          <parent link="segment${no -1}b" />
                          <child link="segment${no}a" />
                          <origin rpy="0 0 0" xyz="0 -0.60 0" />
                        </joint>
                      </xacro:macro>
                    
                      <!-- Macro for module definition -->
                      <xacro:macro name="module" params="no">
                        <xacro:segment_vertical no="${no}"></xacro:segment_vertical>
                        <xacro:joint_fixed no="${no}"></xacro:joint_fixed>
                        <xacro:cross no="${no}"></xacro:cross>
                        <xacro:segment_horizontal no="${no}"></xacro:segment_horizontal>
                        <xacro:joint_horizontal no="${no}"></xacro:joint_horizontal>
                        <xacro:joint_vertical no="${no}"></xacro:joint_vertical>
                      </xacro:macro>
                    
                      <!-- *************************************************************** -->
                      <!-- Specific Module and Joint Definitions -->
                      <!-- *************************************************************** -->
                      <!-- Define the cross link for module 1 -->
                      <link name="cross1">
                        <visual>
                          <origin rpy="0 0 0" xyz="0.065 -0.558 0.065" />
                          <geometry>
                            <mesh filename="${mesh_cross}" scale="0.010 0.010 0.010" />
                          </geometry>
                          <material name="blue" />
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="${mesh_cross}" scale="0.010 0.010 0.010" />
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="0.005" />
                          <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" />
                        </inertial>
                      </link>
                    
                      <!-- Define the first horizontal segment link -->
                      <link name="segment1">
                        <visual>
                          <origin rpy="0 1.5708 0" xyz="0.0 -0.53 0" />
                          <geometry>
                            <mesh filename="${mesh_module}" scale="0.010 0.010 0.010" />
                          </geometry>
                          <material name="blue" />
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="${mesh_module}" scale="0.010 0.010 0.010" />
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="0.0525" />
                          <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" />
                        </inertial>
                      </link>
                    
                      <!-- Define the joint between base and first cross link -->
                      <joint name="joint2" type="revolute">
                        <parent link="base_link" />
                        <child link="cross1" />
                        <origin rpy="0 0 0" xyz="0 0 0" />
                        <axis xyz="1 0 0" />
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1" />
                      </joint>
                    
                      <!-- Define the joint between first cross link and first segment -->
                      <joint name="joint1" type="revolute">
                        <parent link="cross1" />
                        <child link="segment1" />
                        <origin rpy="0 0 0" xyz="0 0 0" />
                        <axis xyz="0 0 1" />
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1" />
                      </joint>
                    
                      <!-- Define additional modules using macros -->
                      <xacro:segment_vertical no="2"></xacro:segment_vertical>
                    
                      <joint name="joint_fix_mod_2" type="fixed">
                        <parent link="segment1" />
                        <child link="segment2a" />
                        <origin rpy="0 0 0" xyz="0 -0.60 0" />
                      </joint>
                    
                      <xacro:cross no="2"></xacro:cross>
                      <xacro:segment_horizontal no="2"></xacro:segment_horizontal>
                      <xacro:joint_horizontal no="2"></xacro:joint_horizontal>
                      <xacro:joint_vertical no="2"></xacro:joint_vertical>
                    
                      <!-- Additional modules created dynamically -->
                      <xacro:module no="3"></xacro:module>
                      <xacro:module no="4"></xacro:module>
                      <xacro:module no="5"></xacro:module>
                      <xacro:module no="6"></xacro:module>
                    <xacro:include filename="$(find ros_gz_example_description)/models/snakebot/robot.gazebo" /> |
                    </robot>
                    

                ‚îî‚îÄ‚îÄ snake_robot.xacro
                    Content:
                    <?xml version="1.0"?>
                    <robot name="snake_robot"
                      xmlns:xacro="http://ros.org/wiki/xacro">
                    
                      <!-- *************************************************************** -->
                      <!-- Material Definitions -->
                      <!-- *************************************************************** -->
                      <!-- Blue material definition for robot visualization -->
                      <material name="blue">
                        <color rgba="0 0 0.8 1" />
                      </material>
                    
                      <!-- Red material definition for robot visualization -->
                      <material name="red">
                        <color rgba="1 1 0.8 1" />
                      </material>
                       <xacro:property name="segment_mass" value="0.0525" /> 
                     
                        <xacro:property name="cross_mass" value="0.005" />
                    
                    
                      <!-- *************************************************************** -->
                      <!-- Base Link Definition -->
                      <!-- *************************************************************** -->
                      <!-- Defines the base link of the robot with visual, collision, and inertial properties -->
                      <link name="base_footprint"> </link>
                    <joint name="body link joint" type="fixed">
                    <parent link="base_footprint"/>
                    <child link="base_link"/>
                    </joint>
                      <link name="base_link">
                        <visual>
                          <origin rpy="3.14159 0 0" xyz="0 0.528 0" />
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010" />
                          </geometry>
                          <material name="blue" />
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010" />
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="${segment_mass}" />
                          <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" />
                        </inertial>
                      </link>
                    
                     <!-- *************************************************************** -->
                      <!-- Macros Definitions -->
                      <!-- *************************************************************** -->
                      <!-- Macro for cross link definition -->
                      <xacro:macro name="cross" params="no">
                        <link name="cross${no}">
                          <visual>
                            <origin rpy="0 0 0" xyz="0.065 -0.558 0.065" />
                            <geometry>
                              <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010" />
                            </geometry>
                            <material name="blue" />
                          </visual>
                          <collision>
                            <geometry>
                              <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010" />
                            </geometry>
                          </collision>
                          <inertial>
                            <mass value="${cross_mass}" />
                            <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" />
                          </inertial>
                        </link>
                      </xacro:macro>
                    
                      <!-- Macro for vertical segment link definition -->
                      <xacro:macro name="segment_vertical" params="no">
                        <link name="segment${no}a">
                          <visual>
                            <origin rpy="0 0 3.14159" xyz="0.0 0 0" />
                            <geometry>
                              <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010" />
                            </geometry>
                            <material name="blue" />
                          </visual>
                          <collision>
                            <geometry>
                              <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010" />
                            </geometry>
                          </collision>
                          <inertial>
                            <mass value="${segment_mass}" />
                            <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" />
                          </inertial>
                        </link>
                      </xacro:macro>
                    
                      <!-- Macro for horizontal segment link definition -->
                      <xacro:macro name="segment_horizontal" params="no">
                        <link name="segment${no}b">
                          <visual>
                            <origin rpy="0 1.5708 0" xyz="0.0 -0.558 0" />
                            <geometry>
                              <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010" />
                            </geometry>
                            <material name="red" />
                          </visual>
                          <collision>
                            <geometry>
                              <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010" />
                            </geometry>
                          </collision>
                          <inertial>
                            <mass value="${segment_mass}" />
                            <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" />
                          </inertial>
                        </link>
                        <link name="servo${no}">
                      <visual>
                        <origin rpy="0 0 0" xyz="0.0 0.0 0.0" /> <!-- Corrected xyz with three values -->
                        <geometry>
                          <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/motor.stl" scale="0.010 0.010 0.010" />
                        </geometry>
                        <material name="red" />
                      </visual>
                      <collision>
                        <geometry>
                          <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/motor.stl" scale="0.010 0.010 0.010" />
                        </geometry>
                      </collision>
                      <inertial>
                        <mass value="0.05" />
                        <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" />
                      </inertial>
                    </link>
                    
                    <!-- Fixed joint to attach the servo to the segment -->
                    <joint name="servo_joint${no}" type="fixed">
                      <parent link="segment${no}b" />
                      <child link="servo${no}" />
                      <origin rpy="1.57  0 3.14" xyz="0.0 -0.55 0.0" /> <!-- xyz should have three values -->
                    </joint>
                      </xacro:macro>
                    
                      <!-- Macro for horizontal joint definition -->
                      <xacro:macro name="joint_horizontal" params="no">
                        <joint name="joint${2 * no - 1}" type="revolute">
                          <parent link="cross${no}" />
                          <child link="segment${no}b" />
                          <origin rpy="0 0 0" xyz="0 0 0" />
                          <axis xyz="0 0 1" />
                          <limit effort="100" lower="-1.57" upper="1.57" velocity="1" />
                        </joint>
                      </xacro:macro>
                    
                      <!-- Macro for vertical joint definition -->
                      <xacro:macro name="joint_vertical" params="no">
                        <joint name="joint${2 * no}" type="revolute">
                          <parent link="segment${no}a" />
                          <child link="cross${no}" />
                          <origin rpy="0 0 0" xyz="0 -0.522 0" />
                          <axis xyz="1 0 0" />
                          <limit effort="100" lower="-1.57" upper="1.57" velocity="1" />
                        </joint>
                      </xacro:macro>
                    
                      <!-- Macro for fixed joint definition between segments -->
                      <xacro:macro name="joint_fixed" params="no">
                        <joint name="joint_fix_mod_${no}" type="fixed">
                          <parent link="segment${no -1}b" />
                          <child link="segment${no}a" />
                          <origin rpy="0 0 0" xyz="0 -0.60 0" />
                        </joint>
                      </xacro:macro>
                    
                      <!-- Macro for module definition -->
                      <xacro:macro name="module" params="no">
                        <xacro:segment_vertical no="${no}"></xacro:segment_vertical>
                        <xacro:joint_fixed no="${no}"></xacro:joint_fixed>
                        <xacro:cross no="${no}"></xacro:cross>
                        <xacro:segment_horizontal no="${no}"></xacro:segment_horizontal>
                        <xacro:joint_horizontal no="${no}"></xacro:joint_horizontal>
                        <xacro:joint_vertical no="${no}"></xacro:joint_vertical>
                       
                      </xacro:macro>
                    <!-- Define the fixed servo link -->
                    
                    
                      <!-- *************************************************************** -->
                      <!-- Specific Module and Joint Definitions -->
                      <!-- *************************************************************** -->
                      <!-- Define the cross link for module 1 -->
                      <link name="cross1">
                        <visual>
                          <origin rpy="0 0 0" xyz="0.065 -0.558 0.065" />
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010" />
                          </geometry>
                          <material name="blue" />
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010" />
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="${cross_mass}" />
                          <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" />
                        </inertial>
                      </link>
                    
                      <!-- Define the first horizontal segment link -->
                      <link name="segment1">
                        <visual>
                          <origin rpy="0 1.5708 0" xyz="0.0 -0.53 0" />
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010" />
                          </geometry>
                          <material name="blue" />
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010" />
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="${segment_mass}" />
                          <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1" />
                        </inertial>
                      </link>
                    
                      <!-- Define the joint between base and first cross link -->
                      <joint name="joint2" type="revolute">
                        <parent link="base_link" />
                        <child link="cross1" />
                        <origin rpy="0 0 0" xyz="0 0 0" />
                        <axis xyz="1 0 0" />
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1" />
                      </joint>
                    
                      <!-- Define the joint between first cross link and first segment -->
                      <joint name="joint1" type="revolute">
                        <parent link="cross1" />
                        <child link="segment1" />
                        <origin rpy="0 0 0" xyz="0 0 0" />
                        <axis xyz="0 0 1" />
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1" />
                      </joint>
                    
                      <!-- Define additional modules using macros -->
                      <xacro:segment_vertical no="2"></xacro:segment_vertical>
                    
                      <joint name="joint_fix_mod_2" type="fixed">
                        <parent link="segment1" />
                        <child link="segment2a" />
                        <origin rpy="0 0 0" xyz="0 -0.60 0" />
                      </joint>
                    
                      <xacro:cross no="2"></xacro:cross>
                      <xacro:segment_horizontal no="2"></xacro:segment_horizontal>
                      <xacro:joint_horizontal no="2"></xacro:joint_horizontal>
                      <xacro:joint_vertical no="2"></xacro:joint_vertical>
                    
                      <!-- Additional modules created dynamically -->
                      <xacro:module no="3"></xacro:module>
                      <xacro:module no="4"></xacro:module>
                      <xacro:module no="5"></xacro:module>
                      <xacro:module no="6"></xacro:module>
                    <xacro:include filename="$(find ros_gz_example_description)/models/snakebot/robot.gazebo" /> |
                    </robot>
                    

                ‚îî‚îÄ‚îÄ robot.gazebo
                    Content:
                    <?xml version="1.0"?>
                    <robot xmlns:xacro="http://ros.org/wiki/xacro">
                    
                      <!-- Gazebo Material Colors -->
                      <gazebo reference="base_link">
                        <material>Gazebo/Blue</material>
                        <mu1>0.5</mu1>
                        <mu2>0.5</mu2>
                        <selfCollide>true</selfCollide>
                      </gazebo>
                    
                      <!-- Cross Links -->
                      <xacro:macro name="gazebo_cross" params="n">
                        <gazebo reference="cross${n}">
                          <material>Gazebo/Blue</material>
                          <mu1>0.5</mu1>
                          <mu2>0.5</mu2>
                          <selfCollide>true</selfCollide>
                          <kp>1000000.0</kp>
                          <kd>100.0</kd>
                          <maxVel>1.0</maxVel>
                          <minDepth>0.001</minDepth>
                        </gazebo>
                      </xacro:macro>
                    
                      <!-- Vertical Segments -->
                      <xacro:macro name="gazebo_segment_vertical" params="n">
                        <gazebo reference="segment${n}a">
                          <material>Gazebo/Blue</material>
                          <mu1>0.5</mu1>
                          <mu2>0.5</mu2>
                          <selfCollide>true</selfCollide>
                          <kp>1000000.0</kp>
                          <kd>100.0</kd>
                          <maxVel>1.0</maxVel>
                          <minDepth>0.001</minDepth>
                        </gazebo>
                      </xacro:macro>
                    
                      <!-- Horizontal Segments -->
                      <xacro:macro name="gazebo_segment_horizontal" params="n">
                        <gazebo reference="segment${n}b">
                          <material>Gazebo/Red</material>
                          <mu1>0.5</mu1>
                          <mu2>0.5</mu2>
                          <selfCollide>true</selfCollide>
                          <kp>1000000.0</kp>
                          <kd>100.0</kd>
                          <maxVel>1.0</maxVel>
                          <minDepth>0.001</minDepth>
                        </gazebo>
                      </xacro:macro>
                    
                      <!-- First segment special case -->
                      <gazebo reference="segment1">
                        <material>Gazebo/Blue</material>
                        <mu1>0.5</mu1>
                        <mu2>0.5</mu2>
                        <selfCollide>true</selfCollide>
                        <kp>1000000.0</kp>
                        <kd>100.0</kd>
                        <maxVel>1.0</maxVel>
                        <minDepth>0.001</minDepth>
                      </gazebo>
                    
                      <!-- Apply to all modules -->
                      <xacro:gazebo_cross n="1"/>
                      <xacro:gazebo_cross n="2"/>
                      <xacro:gazebo_cross n="3"/>
                      <xacro:gazebo_cross n="4"/>
                      <xacro:gazebo_cross n="5"/>
                      <xacro:gazebo_cross n="6"/>
                    
                      <xacro:gazebo_segment_vertical n="2"/>
                      <xacro:gazebo_segment_vertical n="3"/>
                      <xacro:gazebo_segment_vertical n="4"/>
                      <xacro:gazebo_segment_vertical n="5"/>
                      <xacro:gazebo_segment_vertical n="6"/>
                    
                      <xacro:gazebo_segment_horizontal n="2"/>
                      <xacro:gazebo_segment_horizontal n="3"/>
                      <xacro:gazebo_segment_horizontal n="4"/>
                      <xacro:gazebo_segment_horizontal n="5"/>
                      <xacro:gazebo_segment_horizontal n="6"/>
                    
                      <!-- Gazebo Joint Properties -->
                      <xacro:macro name="gazebo_joint" params="n">
                        <gazebo reference="joint${n}">
                          <implicitSpringDamper>1</implicitSpringDamper>
                          <provideFeedback>true</provideFeedback>
                          <cfmDamping>1</cfmDamping>
                        </gazebo>
                      </xacro:macro>
                    
                      <!-- Apply to all joints -->
                      <xacro:gazebo_joint n="1"/>
                      <xacro:gazebo_joint n="2"/>
                      <xacro:gazebo_joint n="3"/>
                      <xacro:gazebo_joint n="4"/>
                      <xacro:gazebo_joint n="5"/>
                      <xacro:gazebo_joint n="6"/>
                      <xacro:gazebo_joint n="7"/>
                      <xacro:gazebo_joint n="8"/>
                      <xacro:gazebo_joint n="9"/>
                      <xacro:gazebo_joint n="10"/>
                      <xacro:gazebo_joint n="11"/>
                      <xacro:gazebo_joint n="12"/>
                     <!-- Gazebo plugin for ROS Control -->
                      <gazebo>
                         <plugin
                     filename="gz-sim-joint-position-controller-system"
                     name="gz::sim::systems::JointPositionController">
                     <joint_name>joint1</joint_name>
                     <topic>joint_state1</topic>
                     <p_gain>1</p_gain>
                     <i_gain>0.1</i_gain>
                     <d_gain>0.01</d_gain>
                     <i_max>1</i_max>
                     <i_min>-1</i_min>
                     <cmd_max>1000</cmd_max>
                     <cmd_min>-1000</cmd_min>
                    </plugin><plugin
                     filename="gz-sim-joint-position-controller-system"
                     name="gz::sim::systems::JointPositionController">
                     <joint_name>joint2</joint_name>
                     <topic>joint_state2</topic>
                     <p_gain>1</p_gain>
                     <i_gain>0.1</i_gain>
                     <d_gain>0.01</d_gain>
                     <i_max>1</i_max>
                     <i_min>-1</i_min>
                     <cmd_max>1000</cmd_max>
                     <cmd_min>-1000</cmd_min>
                    </plugin>
                    <plugin
                     filename="gz-sim-joint-position-controller-system"
                     name="gz::sim::systems::JointPositionController">
                     <joint_name>joint3</joint_name>
                     <topic>joint_state3</topic>
                     <p_gain>1</p_gain>
                     <i_gain>0.1</i_gain>
                     <d_gain>0.01</d_gain>
                     <i_max>1</i_max>
                     <i_min>-1</i_min>
                     <cmd_max>1000</cmd_max>
                     <cmd_min>-1000</cmd_min>
                    </plugin>
                    <plugin
                     filename="gz-sim-joint-position-controller-system"
                     name="gz::sim::systems::JointPositionController">
                     <joint_name>joint4</joint_name>
                     <topic>joint_state4</topic>
                     <p_gain>1</p_gain>
                     <i_gain>0.1</i_gain>
                     <d_gain>0.01</d_gain>
                     <i_max>1</i_max>
                     <i_min>-1</i_min>
                     <cmd_max>1000</cmd_max>
                     <cmd_min>-1000</cmd_min>
                    </plugin>
                    <plugin
                     filename="gz-sim-joint-position-controller-system"
                     name="gz::sim::systems::JointPositionController">
                     <joint_name>joint5</joint_name>
                     <topic>joint_state5</topic>
                     <p_gain>1</p_gain>
                     <i_gain>0.1</i_gain>
                     <d_gain>0.01</d_gain>
                     <i_max>1</i_max>
                     <i_min>-1</i_min>
                     <cmd_max>1000</cmd_max>
                     <cmd_min>-1000</cmd_min>
                    </plugin>
                    <plugin
                     filename="gz-sim-joint-position-controller-system"
                     name="gz::sim::systems::JointPositionController">
                     <joint_name>joint6</joint_name>
                     <topic>joint_state6</topic>
                     <p_gain>1</p_gain>
                     <i_gain>0.1</i_gain>
                     <d_gain>0.01</d_gain>
                     <i_max>1</i_max>
                     <i_min>-1</i_min>
                     <cmd_max>1000</cmd_max>
                     <cmd_min>-1000</cmd_min>
                    </plugin>
                    <plugin
                     filename="gz-sim-joint-position-controller-system"
                     name="gz::sim::systems::JointPositionController">
                     <joint_name>joint7</joint_name>
                     <topic>joint_state7</topic>
                     <p_gain>1</p_gain>
                     <i_gain>0.1</i_gain>
                     <d_gain>0.01</d_gain>
                     <i_max>1</i_max>
                     <i_min>-1</i_min>
                     <cmd_max>1000</cmd_max>
                     <cmd_min>-1000</cmd_min>
                    </plugin>
                    <plugin
                     filename="gz-sim-joint-position-controller-system"
                     name="gz::sim::systems::JointPositionController">
                     <joint_name>joint8</joint_name>
                     <topic>joint_state8</topic>
                     <p_gain>1</p_gain>
                     <i_gain>0.1</i_gain>
                     <d_gain>0.01</d_gain>
                     <i_max>1</i_max>
                     <i_min>-1</i_min>
                     <cmd_max>1000</cmd_max>
                     <cmd_min>-1000</cmd_min>
                    </plugin>
                    <plugin
                     filename="gz-sim-joint-position-controller-system"
                     name="gz::sim::systems::JointPositionController">
                     <joint_name>joint9</joint_name>
                     <topic>joint_state9</topic>
                     <p_gain>1</p_gain>
                     <i_gain>0.1</i_gain>
                     <d_gain>0.01</d_gain>
                     <i_max>1</i_max>
                     <i_min>-1</i_min>
                     <cmd_max>1000</cmd_max>
                     <cmd_min>-1000</cmd_min>
                    </plugin>
                    <plugin
                     filename="gz-sim-joint-position-controller-system"
                     name="gz::sim::systems::JointPositionController">
                     <joint_name>joint10</joint_name>
                     <topic>joint_state10</topic>
                     <p_gain>1</p_gain>
                     <i_gain>0.1</i_gain>
                     <d_gain>0.01</d_gain>
                     <i_max>1</i_max>
                     <i_min>-1</i_min>
                     <cmd_max>1000</cmd_max>
                     <cmd_min>-1000</cmd_min>
                    </plugin>
                    <plugin
                     filename="gz-sim-joint-position-controller-system"
                     name="gz::sim::systems::JointPositionController">
                     <joint_name>joint11</joint_name>
                     <topic>joint_state11</topic>
                     <p_gain>1</p_gain>
                     <i_gain>0.1</i_gain>
                     <d_gain>0.01</d_gain>
                     <i_max>1</i_max>
                     <i_min>-1</i_min>
                     <cmd_max>1000</cmd_max>
                     <cmd_min>-1000</cmd_min>
                    </plugin>
                    <plugin
                     filename="gz-sim-joint-position-controller-system"
                     name="gz::sim::systems::JointPositionController">
                     <joint_name>joint12</joint_name>
                     <topic>joint_state12</topic>
                     <p_gain>1</p_gain>
                     <i_gain>0.1</i_gain>
                     <d_gain>0.01</d_gain>
                     <i_max>1</i_max>
                     <i_min>-1</i_min>
                     <cmd_max>1000</cmd_max>
                     <cmd_min>-1000</cmd_min>
                    </plugin>
                      </gazebo>
                    
                    </robot>
                    

                ‚îî‚îÄ‚îÄ frictional_world.sdf
                    Content:
                    <?xml version="1.0"?>
                    <sdf version="1.6">
                      <world name="empty">
                        <physics name="1ms" type="ignored">
                          <max_step_size>0.001</max_step_size>
                          <real_time_factor>1.0</real_time_factor>
                        </physics>
                        <plugin
                          filename="gz-sim-physics-system"
                          name="gz::sim::systems::Physics">
                        </plugin>
                        <plugin
                          filename="gz-sim-user-commands-system"
                          name="gz::sim::systems::UserCommands">
                        </plugin>
                        <plugin
                          filename="gz-sim-scene-broadcaster-system"
                          name="gz::sim::systems::SceneBroadcaster">
                        </plugin>
                        <plugin
                          filename="gz-sim-contact-system"
                          name="gz::sim::systems::Contact">
                        </plugin>
                    
                        <light type="directional" name="sun">
                          <cast_shadows>true</cast_shadows>
                          <pose>0 0 10 0 0 0</pose>
                          <diffuse>0.8 0.8 0.8 1</diffuse>
                          <specular>0.2 0.2 0.2 1</specular>
                          <attenuation>
                            <range>1000</range>
                            <constant>0.9</constant>
                            <linear>0.01</linear>
                            <quadratic>0.001</quadratic>
                          </attenuation>
                          <direction>-0.5 0.1 -0.9</direction>
                        </light>
                    
                        <model name="ground_plane">
                          <static>true</static>
                          <link name="link">
                            <collision name="collision">
                              <geometry>
                                <plane>
                                  <normal>0 0 1</normal>
                                  <size>100 100</size>
                                </plane>
                              </geometry>
                              <surface>
                                <friction>
                                  <ode>
                                    <mu>0.9</mu> <!-- Friction coefficient -->
                                    <mu2>0.8</mu2> <!-- Secondary friction coefficient -->
                                    <slip1>0.1</slip1> <!-- Longitudinal slip -->
                                    <slip2>0.1</slip2> <!-- Lateral slip -->
                                  </ode>
                                </friction>
                              </surface>
                            </collision>
                            <visual name="visual">
                              <geometry>
                                <plane>
                                  <normal>0 0 1</normal>
                                  <size>100 100</size>
                                </plane>
                              </geometry>
                              <material>
                                <ambient>0.1 0.8 0.1 1</ambient> <!-- Green color -->
                                <diffuse>0.1 0.8 0.1 1</diffuse> <!-- Green color -->
                                <specular>0.1 0.8 0.1 1</specular> <!-- Green color -->
                              </material>
                            </visual>
                          </link>
                        </model>
                    
                      </world>
                    </sdf>
                    

                ‚îî‚îÄ‚îÄ snakebot_v3.urdf
                    Content:
                    <?xml version="1.0" ?>
                    <!-- =================================================================================== -->
                    <!-- |    This document was autogenerated by xacro from /home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/urdf/snake_robot.xacro | -->
                    <!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
                    <!-- =================================================================================== -->
                    <robot name="snake_robot">
                      <!-- Define Material for the robot -->
                      <material name="blue">
                        <color rgba="0 0 0.8 0.5"/>
                      </material>
                      <!-- Base Link Definition -->
                      <link name="base_link">
                        <visual>
                          <origin rpy="3.14159 0 0" xyz="0 0.528 0"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                      <gazebo reference="base_link">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                      <!-- Definition of Segments and Joints -->
                      <link name="cross1">
                        <visual>
                          <origin rpy="0 0 0" xyz="0.065 -0.558 0.065"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                      <gazebo reference="cross1">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                      <link name="segment1">
                        <visual>
                          <origin rpy="0 1.5708 0" xyz="0.0 -0.53 0"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                      <gazebo reference="segment1">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                      <joint name="joint2" type="revolute">
                        <parent link="base_link"/>
                        <child link="cross1"/>
                        <origin rpy="0 0 0" xyz="0 0 0"/>
                        <axis xyz="1 0 0"/>
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1"/>
                      </joint>
                      <joint name="joint1" type="revolute">
                        <parent link="cross1"/>
                        <child link="segment1"/>
                        <origin rpy="0 0 0" xyz="0 0 0"/>
                        <axis xyz="0 0 1"/>
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1"/>
                      </joint>
                      <link name="segment2a">
                        <visual>
                          <origin rpy="0 0 3.14159" xyz="0.0 0  0"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                      <gazebo reference="segment2a">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                      <joint name="joint_fix_mod_2" type="fixed">
                        <parent link="segment1"/>
                        <child link="segment2a"/>
                        <origin rpy="0 0 0" xyz="0 -0.60 0"/>
                      </joint>
                      <link name="cross2">
                        <visual>
                          <origin rpy="0 0 0" xyz="0.065  -0.558  0.065"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                      <gazebo reference="cross2">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                      <link name="segment2b">
                        <visual>
                          <origin rpy="0 1.5708 0" xyz="0.0 -0.558 0"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                      <gazebo reference="segment2b">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                      <joint name="joint3" type="revolute">
                        <parent link="cross2"/>
                        <child link="segment2b"/>
                        <origin rpy="0 0 0" xyz="0 0 0"/>
                        <axis xyz="0 0 1"/>
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1"/>
                      </joint>
                      <joint name="joint4" type="revolute">
                        <parent link="segment2a"/>
                        <child link="cross2"/>
                        <origin rpy="0 0 0" xyz="0 -0.522  0"/>
                        <axis xyz="1 0 0"/>
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1"/>
                      </joint>
                       
                      <link name="segment3a">
                        <visual>
                          <origin rpy="0 0 3.14159" xyz="0.0 0 0"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                      <gazebo reference="segment3a">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                      <joint name="joint_fix_mod_3" type="fixed">
                        <parent link="segment2b"/>
                        <child link="segment3a"/>
                        <origin rpy="0 0 0" xyz="0 -0.60 0"/>
                      </joint>
                      <link name="cross3">
                        <visual>
                          <origin rpy="0 0 0" xyz="0.065 -0.558 0.065"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                      <gazebo reference="cross3">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                      <link name="segment3b">
                        <visual>
                          <origin rpy="0 1.5708 0" xyz="0.0 -0.558 0"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                      <gazebo reference="segment3b">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                     
                      <joint name="joint5" type="revolute">
                        <parent link="cross3"/>
                        <child link="segment3b"/>
                        <origin rpy="0 0 0" xyz="0 0 0"/>
                        <axis xyz="0 0 1"/>
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1"/>
                      </joint>
                      <joint name="joint6" type="revolute">
                        <parent link="segment3a"/>
                        <child link="cross3"/>
                        <origin rpy="0 0 0" xyz="0 -0.522 0"/>
                        <axis xyz="1 0 0"/>
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1"/>
                      </joint>
                      <link name="segment4a">
                        <visual>
                          <origin rpy="0 0 3.14159" xyz="0.0 0 0"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                      <gazebo reference="segment4a">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                      <joint name="joint_fix_mod_4" type="fixed">
                        <parent link="segment3b"/>
                        <child link="segment4a"/>
                        <origin rpy="0 0 0" xyz="0 -0.60 0"/>
                      </joint>
                      <link name="cross4">
                        <visual>
                          <origin rpy="0 0 0" xyz="0.065 -0.558 0.065"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                      <gazebo reference="cross4">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                      <link name="segment4b">
                        <visual>
                          <origin rpy="0 1.5708 0" xyz="0.0 -0.558 0"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                      <gazebo reference="segment4b">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                      <joint name="joint7" type="revolute">
                        <parent link="cross4"/>
                        <child link="segment4b"/>
                        <origin rpy="0 0 0" xyz="0 0 0"/>
                        <axis xyz="0 0 1"/>
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1"/>
                      </joint>
                      <joint name="joint8" type="revolute">
                        <parent link="segment4a"/>
                        <child link="cross4"/>
                        <origin rpy="0 0 0" xyz="0 -0.522 0"/>
                        <axis xyz="1 0 0"/>
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1"/>
                      </joint>
                      <link name="segment5a">
                        <visual>
                          <origin rpy="0 0 3.14159" xyz="0.0 0 0"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                      
                      <joint name="joint_fix_mod_5" type="fixed">
                        <parent link="segment4b"/>
                        <child link="segment5a"/>
                        <origin rpy="0 0 0" xyz="0 -0.60 0"/>
                      </joint>
                      <link name="cross5">
                        <visual>
                          <origin rpy="0 0 0" xyz="0.065 -0.558 0.065"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                    
                      <link name="segment5b">
                        <visual>
                          <origin rpy="0 1.5708 0" xyz="0.0 -0.558 0"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                    
                      <joint name="joint9" type="revolute">
                        <parent link="cross5"/>
                        <child link="segment5b"/>
                        <origin rpy="0 0 0" xyz="0 0 0"/>
                        <axis xyz="0 0 1"/>
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1"/>
                      </joint>
                      <joint name="joint10" type="revolute">
                        <parent link="segment5a"/>
                        <child link="cross5"/>
                        <origin rpy="0 0 0" xyz="0 -0.522 0"/>
                        <axis xyz="1 0 0"/>
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1"/>
                      </joint>
                      <link name="segment6a">
                        <visual>
                          <origin rpy="0 0 3.14159" xyz="0.0 0 0"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                     
                      <joint name="joint_fix_mod_6" type="fixed">
                        <parent link="segment5b"/>
                        <child link="segment6a"/>
                        <origin rpy="0 0 0" xyz="0 -0.60 0"/>
                      </joint>
                      <link name="cross6">
                        <visual>
                          <origin rpy="0 0 0" xyz="0.065 -0.558 0.065"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/cross.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                    
                      <link name="segment6b">
                        <visual>
                          <origin rpy="0 1.5708 0" xyz="0.0 -0.558 0"/>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                          <material name="blue"/>
                        </visual>
                        <collision>
                          <geometry>
                            <mesh filename="file:///home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/meshes/module.stl" scale="0.010 0.010 0.010"/>
                          </geometry>
                        </collision>
                        <inertial>
                          <mass value="1.0"/>
                         <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
                    
                        </inertial>
                      </link>
                     
                      <joint name="joint11" type="revolute">
                        <parent link="cross6"/>
                        <child link="segment6b"/>
                        <origin rpy="0 0 0" xyz="0 0 0"/>
                        <axis xyz="0 0 1"/>
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1"/>
                      </joint>
                      <joint name="joint12" type="revolute">
                        <parent link="segment6a"/>
                        <child link="cross6"/>
                        <origin rpy="0 0 0" xyz="0 -0.522 0"/>
                        <axis xyz="1 0 0"/>
                        <limit effort="100" lower="-1.57" upper="1.57" velocity="1"/>
                      </joint>
                    
                      <gazebo><plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
                          <robotNamespace>/snake_robot</robotNamespace>
                           <robot_param>robot_description</robot_param>
                          <robot_param_node>robot_state_publisher</robot_param_node>
                          <parameters>/home/harikrishnan/ROS_PROJECTS/snake_bot_ws/src/snake_bot/config/snake_controllers.yaml</parameters>
                        </plugin>
                      </gazebo>
                     
                     
                     
                    
                     <gazebo reference="segment5a">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                     <gazebo reference="cross5">
                      <material>Gazebo/Blue</material></gazebo>
                      <gazebo reference="segment5b">
                        <material>Gazebo/Blue</material> </gazebo>
                     <gazebo reference="segment6a">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                     <gazebo reference="cross6">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                     <gazebo reference="segment6b">
                        <material>Gazebo/Blue</material>
                      </gazebo>
                      <ros2_control name="SnakeRobotSystem" type="system">
                      <hardware>
                        <plugin>gazebo_ros2_control/GazeboSystem</plugin>
                      </hardware>
                      <joint name="joint1">
                        <command_interface name="position">
                          <param name="min">-1.57</param>
                          <param name="max">1.57</param>
                        </command_interface>
                        <state_interface name="position"/>
                        <state_interface name="velocity"/>
                      </joint>
                       <joint name="joint2">
                        <command_interface name="position">
                          <param name="min">-1.57</param>
                          <param name="max">1.57</param>
                        </command_interface>
                        <state_interface name="position"/>
                        <state_interface name="velocity"/>
                      </joint>
                       <joint name="joint3">
                        <command_interface name="position">
                          <param name="min">-1.57</param>
                          <param name="max">1.57</param>
                        </command_interface>
                        <state_interface name="position"/>
                        <state_interface name="velocity"/>
                      </joint>
                       <joint name="joint4">
                        <command_interface name="position">
                          <param name="min">-1.57</param>
                          <param name="max">1.57</param>
                        </command_interface>
                        <state_interface name="position"/>
                        <state_interface name="velocity"/>
                      </joint>
                       <joint name="joint5">
                        <command_interface name="position">
                          <param name="min">-1.57</param>
                          <param name="max">1.57</param>
                        </command_interface>
                        <state_interface name="position"/>
                        <state_interface name="velocity"/>
                      </joint>
                       <joint name="joint6">
                        <command_interface name="position">
                          <param name="min">-1.57</param>
                          <param name="max">1.57</param>
                        </command_interface>
                        <state_interface name="position"/>
                        <state_interface name="velocity"/>
                      </joint>
                       <joint name="joint7">
                        <command_interface name="position">
                          <param name="min">-1.57</param>
                          <param name="max">1.57</param>
                        </command_interface>
                        <state_interface name="position"/>
                        <state_interface name="velocity"/>
                      </joint>
                       <joint name="joint8">
                        <command_interface name="position">
                          <param name="min">-1.57</param>
                          <param name="max">1.57</param>
                        </command_interface>
                        <state_interface name="position"/>
                        <state_interface name="velocity"/>
                      </joint>
                       <joint name="joint9">
                        <command_interface name="position">
                          <param name="min">-1.57</param>
                          <param name="max">1.57</param>
                        </command_interface>
                        <state_interface name="position"/>
                        <state_interface name="velocity"/>
                      </joint>
                       <joint name="joint10">
                        <command_interface name="position">
                          <param name="min">-1.57</param>
                          <param name="max">1.57</param>
                        </command_interface>
                        <state_interface name="position"/>
                        <state_interface name="velocity"/>
                      </joint> <joint name="joint11">
                        <command_interface name="position">
                          <param name="min">-1.57</param>
                          <param name="max">1.57</param>
                        </command_interface>
                        <state_interface name="position"/>
                        <state_interface name="velocity"/>
                      </joint>
                       <joint name="joint12">
                        <command_interface name="position">
                          <param name="min">-1.57</param>
                          <param name="max">1.57</param>
                        </command_interface>
                        <state_interface name="position"/>
                        <state_interface name="velocity"/>
                      </joint>
                     
                    
                      
                    </ros2_control>
                    </robot>

                üìÅmeshes
                    ‚îî‚îÄ‚îÄ snake_module.stl
                        [Error reading file: 'utf-8' codec can't decode byte 0xa0 in position 27: invalid start byte]

                    ‚îî‚îÄ‚îÄ module.stl
                        [Error reading file: 'utf-8' codec can't decode byte 0xa0 in position 27: invalid start byte]

                    ‚îî‚îÄ‚îÄ cross.stl
                        [Error reading file: 'utf-8' codec can't decode byte 0xa0 in position 27: invalid start byte]

                    ‚îî‚îÄ‚îÄ motor.stl
                        [Error reading file: 'utf-8' codec can't decode byte 0xa0 in position 27: invalid start byte]

            üìÅrrbot
                ‚îî‚îÄ‚îÄ model.sdf
                    Content:
                    <?xml version="1.0" ?>
                    <sdf version="1.8">
                      <model name='rrbot'>
                        <link name='link1'>
                          <pose>0 0 0 0 -0 0</pose>
                          <inertial>
                            <pose>0 0 1 0 -0 0</pose>
                            <mass>1</mass>
                            <inertia>
                              <ixx>0.334167</ixx>
                              <ixy>0</ixy>
                              <ixz>0</ixz>
                              <iyy>0.334167</iyy>
                              <iyz>0</iyz>
                              <izz>0.00166667</izz>
                            </inertia>
                          </inertial>
                          <collision name='link1_collision'>
                            <pose>0 0 1 0 -0 0</pose>
                            <geometry>
                              <box>
                                <size>0.1 0.1 2</size>
                              </box>
                            </geometry>
                          </collision>
                          <visual name='link1_visual'>
                            <pose>0 0 1 0 -0 0</pose>
                            <geometry>
                              <box>
                                <size>0.1 0.1 2</size>
                              </box>
                            </geometry>
                            <material>
                              <diffuse> 1 0.423529412 0.039215686 1</diffuse>
                              <ambient> 1 0.423529412 0.039215686 1</ambient>
                              <specular>1 0.423529412 0.039215686 1</specular>
                            </material>
                          </visual>
                        </link>
                        <joint name='joint1' type='revolute'>
                          <pose relative_to='link1'>0 0.1 1.95 0 -0 0</pose>
                          <parent>link1</parent>
                          <child>link2</child>
                          <axis>
                            <xyz>0 1 0</xyz>
                            <limit>
                              <lower>-1e+16</lower>
                              <upper>1e+16</upper>
                            </limit>
                            <dynamics>
                              <damping>0.7</damping>
                              <friction>0.0</friction>          
                              <spring_reference>0</spring_reference>
                              <spring_stiffness>0</spring_stiffness>
                            </dynamics>
                          </axis>
                        </joint>
                        <link name='link2'>
                          <pose relative_to='joint1'>0 0 0 0 -0 0</pose>
                          <inertial>
                            <pose>0 0 0.45 0 -0 0</pose>
                            <mass>1</mass>
                            <inertia>
                              <ixx>0.0841667</ixx>
                              <ixy>0</ixy>
                              <ixz>0</ixz>
                              <iyy>0.0841667</iyy>
                              <iyz>0</iyz>
                              <izz>0.00166667</izz>
                            </inertia>
                          </inertial>
                          <collision name='link2_collision'>
                            <pose>0 0 0.45 0 -0 0</pose>
                            <geometry>
                              <box>
                                <size>0.1 0.1 1</size>
                              </box>
                            </geometry>
                          </collision>
                          <visual name='link2_visual'>
                            <pose>0 0 0.45 0 -0 0</pose>
                            <geometry>
                              <box>
                                <size>0.1 0.1 1</size>
                              </box>
                            </geometry>
                            <material>
                              <diffuse> 0 0 0 1</diffuse>
                              <ambient> 0 0 0 1</ambient>
                              <specular>0 0 0 1</specular>
                            </material>
                          </visual>
                        </link>
                        <joint name='joint2' type='revolute'>
                          <pose relative_to='link2'>0 0.1 0.9 0 -0 0</pose>
                          <parent>link2</parent>
                          <child>link3</child>
                          <axis>
                            <xyz>0 1 0</xyz>
                            <limit>
                              <lower>-1e+16</lower>
                              <upper>1e+16</upper>
                            </limit>
                            <dynamics>
                              <damping>0.7</damping>
                              <friction>0.0</friction>          
                              <spring_reference>0</spring_reference>
                              <spring_stiffness>0</spring_stiffness>
                            </dynamics>
                          </axis>
                        </joint>
                        <link name='link3'>
                          <pose relative_to='joint2'>0 0 0 0 -0 0</pose>
                          <inertial>
                            <pose>0 0 0.45 0 -0 0</pose>
                            <mass>1</mass>
                            <inertia>
                              <ixx>0.0841667</ixx>
                              <ixy>0</ixy>
                              <ixz>0</ixz>
                              <iyy>0.0841667</iyy>
                              <iyz>0</iyz>
                              <izz>0.00166667</izz>
                            </inertia>
                          </inertial>
                          <collision name='link3_collision'>
                            <pose>0 0 0.45 0 -0 0</pose>
                            <geometry>
                              <box>
                                <size>0.1 0.1 1</size>
                              </box>
                            </geometry>
                          </collision>
                          <visual name='link3_visual'>
                            <pose>0 0 0.45 0 -0 0</pose>
                            <geometry>
                              <box>
                                <size>0.1 0.1 1</size>
                              </box>
                            </geometry>
                            <material>
                              <diffuse> 1 0.423529412 0.039215686 1</diffuse>
                              <ambient> 1 0.423529412 0.039215686 1</ambient>
                              <specular>1 0.423529412 0.039215686 1</specular>
                            </material>
                          </visual>
                        </link>
                      </model>
                    </sdf>

            üìÅdiff_drive
                ‚îî‚îÄ‚îÄ model.sdf
                    Content:
                    <?xml version="1.0" ?>
                    <sdf version="1.8">
                        <model name='diff_drive'>
                          <link name='chassis'>
                            <pose>-0.151427 -0 0.175 0 -0 0</pose>
                            <inertial>
                              <mass>1.14395</mass>
                              <inertia>
                                <ixx>0.126164</ixx>
                                <ixy>0</ixy>
                                <ixz>0</ixz>
                                <iyy>0.416519</iyy>
                                <iyz>0</iyz>
                                <izz>0.481014</izz>
                              </inertia>
                            </inertial>
                            <visual name='visual_chassis'>
                              <geometry>
                                <box>
                                  <size>2.01142 1 0.568726</size>
                                </box>
                              </geometry>
                              <material>
                                <ambient>0.5 0.5 1.0 1</ambient>
                                <diffuse>0.5 0.5 1.0 1</diffuse>
                                <specular>0.0 0.0 1.0 1</specular>
                              </material>
                            </visual>
                            <collision name='collision_chassis'>
                              <geometry>
                                <box>
                                  <size>2.01142 1 0.568726</size>
                                </box>
                              </geometry>
                            </collision>
                          </link>
                    
                          <link name='left_wheel'>
                            <pose>0.554283 0.625029 -0.025 -1.5707 0 0</pose>
                            <inertial>
                              <mass>2</mass>
                              <inertia>
                                <ixx>0.145833</ixx>
                                <ixy>0</ixy>
                                <ixz>0</ixz>
                                <iyy>0.145833</iyy>
                                <iyz>0</iyz>
                                <izz>0.125</izz>
                              </inertia>
                            </inertial>
                            <visual name='visual_left_wheel'>
                              <geometry>
                                <sphere>
                                  <radius>0.3</radius>
                                </sphere>
                              </geometry>
                              <material>
                                <ambient>0.2 0.2 0.2 1</ambient>
                                <diffuse>0.2 0.2 0.2 1</diffuse>
                                <specular>0.2 0.2 0.2 1</specular>
                              </material>
                            </visual>
                            <collision name='collision_left_wheel'>
                              <geometry>
                                <sphere>
                                  <radius>0.3</radius>
                                </sphere>
                              </geometry>
                            </collision>
                          </link>
                    
                          <link name='right_wheel'>
                            <pose>0.554282 -0.625029 -0.025 -1.5707 0 0</pose>
                            <inertial>
                              <mass>2</mass>
                              <inertia>
                                <ixx>0.145833</ixx>
                                <ixy>0</ixy>
                                <ixz>0</ixz>
                                <iyy>0.145833</iyy>
                                <iyz>0</iyz>
                                <izz>0.125</izz>
                              </inertia>
                            </inertial>
                            <visual name='visual_right_wheel'>
                              <geometry>
                                <sphere>
                                  <radius>0.3</radius>
                                </sphere>
                              </geometry>
                              <material>
                                <ambient>0.2 0.2 0.2 1</ambient>
                                <diffuse>0.2 0.2 0.2 1</diffuse>
                                <specular>0.2 0.2 0.2 1</specular>
                              </material>
                            </visual>
                            <collision name='collision_right_wheel'>
                              <geometry>
                                <sphere>
                                  <radius>0.3</radius>
                                </sphere>
                              </geometry>
                            </collision>
                          </link>
                    
                          <link name='caster'>
                            <pose>-0.957138 -0 -0.125 0 -0 0</pose>
                            <inertial>
                              <mass>1</mass>
                              <inertia>
                                <ixx>0.1</ixx>
                                <ixy>0</ixy>
                                <ixz>0</ixz>
                                <iyy>0.1</iyy>
                                <iyz>0</iyz>
                                <izz>0.1</izz>
                              </inertia>
                            </inertial>
                            <visual name='visual_caster'>
                              <geometry>
                                <sphere>
                                  <radius>0.2</radius>
                                </sphere>
                              </geometry>
                              <material>
                                <ambient>0.2 0.2 0.2 1</ambient>
                                <diffuse>0.2 0.2 0.2 1</diffuse>
                                <specular>0.2 0.2 0.2 1</specular>
                              </material>
                            </visual>
                            <collision name='collision_caster'>
                              <geometry>
                                <sphere>
                                  <radius>0.2</radius>
                                </sphere>
                              </geometry>
                            </collision>
                          </link>
                    
                          <link name="lidar_link">
                            <pose>0 0 0.5 0 0 0</pose>
                            <inertial>
                              <mass>0.1</mass>
                              <inertia>
                                <ixx>0.000166667</ixx>
                                <iyy>0.000166667</iyy>
                                <izz>0.000166667</izz>
                              </inertia>
                            </inertial>
                            <collision name="collision">
                              <geometry>
                                <box>
                                  <size>0.1 0.1 0.1</size>
                                </box>
                              </geometry>
                            </collision>
                            <visual name="visual">
                              <geometry>
                                <box>
                                  <size>0.1 0.1 0.1</size>
                                </box>
                              </geometry>
                            </visual>
                            <sensor name='gpu_lidar' type='gpu_lidar'>
                              <pose>0 0 0 0 0 0</pose>
                              <topic>scan</topic>
                               <gz_frame_id>diff_drive/lidar_link</gz_frame_id>
                              <update_rate>10</update_rate>
                              <lidar>
                                <scan>
                                  <horizontal>
                                    <samples>640</samples>
                                    <resolution>1</resolution>
                                    <min_angle>-1.396263</min_angle>
                                    <max_angle>1.396263</max_angle>
                                  </horizontal>
                                  <vertical>
                                    <samples>1</samples>
                                    <resolution>1</resolution>
                                    <min_angle>0.0</min_angle>
                                    <max_angle>0.0</max_angle>
                                  </vertical>
                                </scan>
                                <range>
                                  <min>0.08</min>
                                  <max>10.0</max>
                                  <resolution>0.01</resolution>
                                </range>
                              </lidar>
                              <visualize>true</visualize>
                            </sensor>
                          </link>
                    
                          <joint name='lidar_joint' type='fixed'>
                            <parent>chassis</parent>
                            <child>lidar_link</child>
                          </joint>
                    
                          <joint name='left_wheel_joint' type='revolute'>
                            <parent>chassis</parent>
                            <child>left_wheel</child>
                            <axis>
                              <xyz>0 0 1</xyz>
                              <limit>
                                <lower>-1.79769e+308</lower>
                                <upper>1.79769e+308</upper>
                              </limit>
                            </axis>
                          </joint>
                    
                          <joint name='right_wheel_joint' type='revolute'>
                            <parent>chassis</parent>
                            <child>right_wheel</child>
                            <axis>
                              <xyz>0 0 1</xyz>
                              <limit>
                                <lower>-1.79769e+308</lower>
                                <upper>1.79769e+308</upper>
                              </limit>
                            </axis>
                          </joint>
                    
                          <joint name='caster_wheel' type='ball'>
                            <parent>chassis</parent>
                            <child>caster</child>
                          </joint>
                    
                          <plugin
                            filename="ignition-gazebo-diff-drive-system"
                            name="ignition::gazebo::systems::DiffDrive">
                            <left_joint>left_wheel_joint</left_joint>
                            <right_joint>right_wheel_joint</right_joint>
                            <wheel_separation>1.25</wheel_separation>
                            <wheel_radius>0.3</wheel_radius>
                            <odom_publish_frequency>1</odom_publish_frequency>
                            <max_linear_acceleration>1</max_linear_acceleration>
                            <min_linear_acceleration>-1</min_linear_acceleration>
                            <max_angular_acceleration>2</max_angular_acceleration>
                            <min_angular_acceleration>-2</min_angular_acceleration>
                            <max_linear_velocity>0.5</max_linear_velocity>
                            <min_linear_velocity>-0.5</min_linear_velocity>
                            <max_angular_velocity>1</max_angular_velocity>
                            <min_angular_velocity>-1</min_angular_velocity>
                          </plugin>
                        </model>
                    </sdf>
                    

                ‚îî‚îÄ‚îÄ model.config
                    Content:
                    <?xml version="1.0"?>
                    <model>
                      <name>diff_drive</name>
                      <version>1.0</version>
                      <sdf version="1.8">model.sdf</sdf>
                    
                      <author>
                        <name>Dharini Dutia</name>
                        <email>dharini@openrobotics.org</email>
                      </author>
                    
                      <description>
                      Example differential drive vehicle model.
                      </description>
                    </model>

        üìÅhooks
            ‚îî‚îÄ‚îÄ ros_gz_example_description.dsv.in
                Content:
                prepend-non-duplicate;GZ_SIM_RESOURCE_PATH;share;@CMAKE_INSTALL_PREFIX@/share
                

            ‚îî‚îÄ‚îÄ ros_gz_example_description.sh.in
                Content:
                ament_prepend_unique_value GZ_SIM_RESOURCE_PATH "$AMENT_CURRENT_PREFIX/share/@PROJECT_NAME@/models"
                
                

    üìÅros_gz_example_bringup
        ‚îî‚îÄ‚îÄ package.xml
            Content:
            <?xml version="1.0"?>
            <?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
            <package format="3">
              <name>ros_gz_example_bringup</name>
              <version>0.0.0</version>
              <description>Contains launch files for the ros_gz_example project</description>
              <maintainer email="michael@openrobotics.org">Michael Carroll</maintainer>
              <license>Apache 2.0</license>
              <author>Michael Carroll</author>
              <author>Dharini Dutia</author>
            
              <depend>joint_state_publisher_gui</depend>
            
              <depend>ros_gz</depend>
              <depend>sdformat_urdf</depend>
              <depend>ros_gz_example_description</depend>
              <depend>ros_gz_example_gazebo</depend>
            
              <buildtool_depend>ament_cmake</buildtool_depend>
            
              <test_depend>ament_lint_auto</test_depend>
            
              <export>
                <build_type>ament_cmake</build_type>
              </export>
            </package>
            
            

        ‚îî‚îÄ‚îÄ CMakeLists.txt
            Content:
            cmake_minimum_required(VERSION 3.5)
            
            project(ros_gz_example_bringup)
            
            find_package(ament_cmake REQUIRED)
            find_package(ros_gz_example_description REQUIRED)
            find_package(ros_gz_example_gazebo REQUIRED)
            
            # Install project launch files
            install(
              DIRECTORY
                launch/
              DESTINATION share/${PROJECT_NAME}/launch
            )
            
            # Install project configuration files
            install(
              DIRECTORY
                config/
              DESTINATION share/${PROJECT_NAME}/config
            )
            
            if(BUILD_TESTING)
              find_package(ament_lint_auto REQUIRED)
              ament_lint_auto_find_test_dependencies()
            endif()
            
            ament_package()
            

        üìÅlaunch
            ‚îî‚îÄ‚îÄ snakebot.launch copy.py
                Content:
                import os
                from ament_index_python.packages import get_package_share_directory
                from ament_index_python.packages import get_package_share_path
                from launch import LaunchDescription
                from launch.substitutions import LaunchConfiguration, Command
                from launch.actions import DeclareLaunchArgument
                from launch_ros.actions import Node
                import launch_ros.descriptions
                from launch_ros.parameter_descriptions import ParameterValue
                from launch import LaunchDescription
                from launch.actions import IncludeLaunchDescription
                from launch.launch_description_sources import PythonLaunchDescriptionSource
                
                def generate_launch_description():
                
                    # Check if we're told to use sim time
                    use_sim_time = LaunchConfiguration('use_sim_time')
                
                    # Get the urdf/xacro file path
                    path_to_urdf = os.path.join(get_package_share_path('ros_gz_example_description'), 
                        'models', 
                        'snakebot', 
                        'snake_robot.xacro'
                     )
                    # Create a robot_state_publisher node
                    node_robot_state_publisher = Node(
                        package='robot_state_publisher',
                        executable='robot_state_publisher',
                        name='robot_state_publisher',
                        output='screen',
                        parameters=[{
                            'robot_description': ParameterValue(Command(['xacro ', str(path_to_urdf)]), value_type=str)
                        }]
                    )
                
                    # Use your custom Gazebo world (optional). Replace 'empty.sdf' with the word "world" (no "" needed)
                    # world = os.path.join(
                    #     get_package_share_directory(package_name), "worlds", "empty_world.sdf"
                    # )
                
                    gz_sim = IncludeLaunchDescription(
                        PythonLaunchDescriptionSource(
                            [
                                os.path.join(
                                    get_package_share_directory("ros_gz_sim"),
                                    "launch",
                                    "gz_sim.launch.py",
                                )
                            ]
                        ),
                        launch_arguments={"gz_args": [" -r -v 4 ", 'empty.sdf']}.items(),
                    )
                
                    # Spawn the robot in Gazebo
                    spawn_entity = Node(
                        package="ros_gz_sim",
                        executable="create",
                        arguments=[
                            "-name",
                            "robot1",
                            "-topic",
                            "/robot_description",
                            "-x",
                            "0",
                            "-y",
                            "0",
                            "-z",
                            "1.4",
                        ],
                        output="screen",
                    )
                    rviz = Node(
                       package='rviz2',
                       executable='rviz2',
                    
                      
                    )
                
                    # Bridge ROS topics and Gazebo messages for establishing communication
                    
                    # Launch!
                    return LaunchDescription([
                        DeclareLaunchArgument(
                            'use_sim_time',
                            default_value='false',
                            description='Use sim time if true'),
                
                        node_robot_state_publisher, gz_sim, spawn_entity
                    ])

            ‚îî‚îÄ‚îÄ diff_drive.launch.py
                Content:
                # Copyright 2022 Open Source Robotics Foundation, Inc.
                #
                # Licensed under the Apache License, Version 2.0 (the "License");
                # you may not use this file except in compliance with the License.
                # You may obtain a copy of the License at
                #
                #     http://www.apache.org/licenses/LICENSE-2.0
                #
                # Unless required by applicable law or agreed to in writing, software
                # distributed under the License is distributed on an "AS IS" BASIS,
                # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                # See the License for the specific language governing permissions and
                # limitations under the License.
                
                import os
                
                from ament_index_python.packages import get_package_share_directory
                
                from launch import LaunchDescription
                from launch.actions import DeclareLaunchArgument
                from launch.actions import IncludeLaunchDescription
                from launch.conditions import IfCondition
                from launch.launch_description_sources import PythonLaunchDescriptionSource
                from launch.substitutions import LaunchConfiguration, PathJoinSubstitution
                
                from launch_ros.actions import Node
                
                
                def generate_launch_description():
                    # Configure ROS nodes for launch
                
                    # Setup project paths
                    pkg_project_bringup = get_package_share_directory('ros_gz_example_bringup')
                    pkg_project_gazebo = get_package_share_directory('ros_gz_example_gazebo')
                    pkg_project_description = get_package_share_directory('ros_gz_example_description')
                    pkg_ros_gz_sim = get_package_share_directory('ros_gz_sim')
                
                    # Load the SDF file from "description" package
                    sdf_file  =  os.path.join(pkg_project_description, 'models', 'diff_drive', 'model.sdf')
                    with open(sdf_file, 'r') as infp:
                        robot_desc = infp.read()
                
                    # Setup to launch the simulator and Gazebo world
                    gz_sim = IncludeLaunchDescription(
                        PythonLaunchDescriptionSource(
                            os.path.join(pkg_ros_gz_sim, 'launch', 'gz_sim.launch.py')),
                        launch_arguments={'gz_args': PathJoinSubstitution([
                            pkg_project_gazebo,
                            'worlds',
                            'diff_drive.sdf'
                        ])}.items(),
                    )
                
                    # Takes the description and joint angles as inputs and publishes the 3D poses of the robot links
                    robot_state_publisher = Node(
                        package='robot_state_publisher',
                        executable='robot_state_publisher',
                        name='robot_state_publisher',
                        output='both',
                        parameters=[
                            {'use_sim_time': True},
                            {'robot_description': robot_desc},
                        ]
                    )
                
                    # Visualize in RViz
                    rviz = Node(
                       package='rviz2',
                       executable='rviz2',
                       arguments=['-d', os.path.join(pkg_project_bringup, 'config', 'diff_drive.rviz')],
                       condition=IfCondition(LaunchConfiguration('rviz'))
                    )
                
                    # Bridge ROS topics and Gazebo messages for establishing communication
                    bridge = Node(
                        package='ros_gz_bridge',
                        executable='parameter_bridge',
                        parameters=[{
                            'config_file': os.path.join(pkg_project_bringup, 'config', 'ros_gz_example_bridge.yaml'),
                            'qos_overrides./tf_static.publisher.durability': 'transient_local',
                        }],
                        output='screen'
                    )
                
                    return LaunchDescription([
                        gz_sim,
                        DeclareLaunchArgument('rviz', default_value='true',
                                              description='Open RViz.'),
                        bridge,
                        robot_state_publisher,
                        rviz
                    ])
                

            ‚îî‚îÄ‚îÄ rrbot_setup.launch.py
                Content:
                # Copyright 2023 Open Source Robotics Foundation, Inc.
                #
                # Licensed under the Apache License, Version 2.0 (the "License");
                # you may not use this file except in compliance with the License.
                # You may obtain a copy of the License at
                #
                #     http://www.apache.org/licenses/LICENSE-2.0
                #
                # Unless required by applicable law or agreed to in writing, software
                # distributed under the License is distributed on an "AS IS" BASIS,
                # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                # See the License for the specific language governing permissions and
                # limitations under the License.
                
                import os
                
                from ament_index_python.packages import get_package_share_directory
                
                from launch import LaunchDescription
                from launch.actions import DeclareLaunchArgument
                from launch.actions import IncludeLaunchDescription
                from launch.conditions import IfCondition
                from launch.launch_description_sources import PythonLaunchDescriptionSource
                from launch.substitutions import LaunchConfiguration, PathJoinSubstitution
                
                from launch_ros.actions import Node
                
                
                def generate_launch_description():
                    # Configure ROS nodes for launch
                
                    # Setup project paths
                    pkg_project_bringup = get_package_share_directory('ros_gz_example_bringup')
                    pkg_project_description = get_package_share_directory('ros_gz_example_description')
                
                    # Load the SDF file from "description" package
                    sdf_file  =  os.path.join(pkg_project_description, 'models', 'rrbot', 'model.sdf')
                    with open(sdf_file, 'r') as infp:
                        robot_desc = infp.read()
                
                    # For publishing and controlling the robot pose, we need joint states of the robot
                    # Configure the robot model by adjusting the joint angles using the GUI slider
                    joint_state_publisher_gui = Node(
                        package='joint_state_publisher_gui',
                        executable='joint_state_publisher_gui',
                        name='joint_state_publisher_gui',
                        arguments=[sdf_file],
                        output=['screen']
                    )
                
                    # Takes the description and joint angles as inputs and publishes the 3D poses of the robot links
                    robot_state_publisher = Node(
                        package='robot_state_publisher',
                        executable='robot_state_publisher',
                        name='robot_state_publisher',
                        output='both',
                        parameters=[
                            {'use_sim_time': True},
                            {'robot_description': robot_desc},
                        ]
                    )
                
                    # Visualize in RViz
                    rviz = Node(
                       package='rviz2',
                       executable='rviz2',
                       arguments=['-d', os.path.join(pkg_project_bringup, 'config', 'rrbot.rviz')],
                       condition=IfCondition(LaunchConfiguration('rviz'))
                    )
                
                    return LaunchDescription([
                        DeclareLaunchArgument('rviz', default_value='true',
                                              description='Open RViz.'),
                        joint_state_publisher_gui,
                        robot_state_publisher,
                        rviz
                    ])
                

            ‚îî‚îÄ‚îÄ snakebot.launch.py
                Content:
                import os
                from ament_index_python.packages import get_package_share_directory
                from launch import LaunchDescription
                from launch.actions import DeclareLaunchArgument
                from launch_ros.actions import Node
                from launch.actions import IncludeLaunchDescription
                from launch.launch_description_sources import PythonLaunchDescriptionSource
                from launch_ros.parameter_descriptions import ParameterValue
                from launch.substitutions import LaunchConfiguration, Command
                
                def generate_launch_description():
                
                    # Check if we're told to use sim time
                    use_sim_time = LaunchConfiguration('use_sim_time')
                
                    # Get the URDF/XACRO file path
                    path_to_urdf = os.path.join(
                        get_package_share_directory('ros_gz_example_description'), 
                        'models', 
                        'snakebot', 
                        'snake_robot_wokrbale.xacro'
                    )
                
                    # Create a robot_state_publisher node
                    node_robot_state_publisher = Node(
                        package='robot_state_publisher',
                        executable='robot_state_publisher',
                        name='robot_state_publisher',
                        output='screen',
                        parameters=[{
                            'robot_description': ParameterValue(Command(['xacro ', str(path_to_urdf)]), value_type=str)
                        }]
                    )
                
                    # Get the path to the custom world file (frictional_world.sdf)
                    path_to_world = os.path.join(
                        get_package_share_directory('ros_gz_example_description'),
                        'models',
                        'snakebot',
                        'frictional_world.sdf'
                    )
                
                    # Launch Gazebo simulation with the custom world
                    gz_sim = IncludeLaunchDescription(
                        PythonLaunchDescriptionSource(
                            [
                                os.path.join(
                                    get_package_share_directory("ros_gz_sim"),
                                    "launch",
                                    "gz_sim.launch.py",
                                )
                            ]
                        ),
                        launch_arguments={"gz_args": [f"-r -v 4 {path_to_world}"]}.items(),
                    )
                
                    # Spawn the robot in Gazebo
                    spawn_entity = Node(
                        package="ros_gz_sim",
                        executable="create",
                        arguments=[
                            "-name",
                            "robot1",
                            "-topic",
                            "/robot_description",
                            "-x",
                            "0",
                            "-y",
                            "0",
                            "-z",
                            "1.4",
                        ],
                        output="screen",
                    )
                    
                    # Add RViz node (optional)
                    rviz = Node(
                       package='rviz2',
                       executable='rviz2',
                    )
                
                    # Add ros_gz_bridge parameter bridge for joint states
                    bridge_args = [
                        '/joint_state1@std_msgs/msg/Float64@gz.msgs.Double',
                        '/joint_state2@std_msgs/msg/Float64@gz.msgs.Double',
                        '/joint_state3@std_msgs/msg/Float64@gz.msgs.Double',
                        '/joint_state4@std_msgs/msg/Float64@gz.msgs.Double',
                        '/joint_state5@std_msgs/msg/Float64@gz.msgs.Double',
                        '/joint_state6@std_msgs/msg/Float64@gz.msgs.Double',
                        '/joint_state7@std_msgs/msg/Float64@gz.msgs.Double',
                        '/joint_state8@std_msgs/msg/Float64@gz.msgs.Double',
                        '/joint_state9@std_msgs/msg/Float64@gz.msgs.Double',
                        '/joint_state10@std_msgs/msg/Float64@gz.msgs.Double',
                        '/joint_state11@std_msgs/msg/Float64@gz.msgs.Double',
                        '/joint_state12@std_msgs/msg/Float64@gz.msgs.Double',
                    ]
                
                    parameter_bridge_node = Node(
                        package='ros_gz_bridge',
                        executable='parameter_bridge',
                        name='gz_parameter_bridge',
                        arguments=bridge_args,
                        output='screen',
                    )
                
                    # Launch!
                    return LaunchDescription([
                        DeclareLaunchArgument(
                            'use_sim_time',
                            default_value='false',
                            description='Use sim time if true'),
                
                        node_robot_state_publisher,
                        gz_sim,
                        spawn_entity,
                        parameter_bridge_node,
                        
                    ])
                

        üìÅconfig
            ‚îî‚îÄ‚îÄ diff_drive.rviz
                Content:
                Panels:
                  - Class: rviz_common/Displays
                    Help Height: 78
                    Name: Displays
                    Property Tree Widget:
                      Expanded:
                        - /Global Options1
                        - /Status1
                      Splitter Ratio: 0.5
                    Tree Height: 719
                  - Class: rviz_common/Selection
                    Name: Selection
                  - Class: rviz_common/Tool Properties
                    Expanded:
                      - /2D Goal Pose1
                      - /Publish Point1
                    Name: Tool Properties
                    Splitter Ratio: 0.5886790156364441
                  - Class: rviz_common/Views
                    Expanded:
                      - /Current View1
                    Name: Views
                    Splitter Ratio: 0.5
                  - Class: rviz_common/Time
                    Experimental: false
                    Name: Time
                    SyncMode: 0
                    SyncSource: LaserScan
                Visualization Manager:
                  Class: ""
                  Displays:
                    - Alpha: 0.5
                      Cell Size: 1
                      Class: rviz_default_plugins/Grid
                      Color: 160; 160; 164
                      Enabled: true
                      Line Style:
                        Line Width: 0.029999999329447746
                        Value: Lines
                      Name: Grid
                      Normal Cell Count: 0
                      Offset:
                        X: 0
                        Y: 0
                        Z: 0
                      Plane: XY
                      Plane Cell Count: 10
                      Reference Frame: <Fixed Frame>
                      Value: true
                    - Alpha: 1
                      Class: rviz_default_plugins/RobotModel
                      Collision Enabled: false
                      Description File: ""
                      Description Source: Topic
                      Description Topic:
                        Depth: 5
                        Durability Policy: Volatile
                        History Policy: Keep Last
                        Reliability Policy: Reliable
                        Value: /robot_description
                      Enabled: true
                      Links:
                        All Links Enabled: true
                        Expand Joint Details: false
                        Expand Link Details: false
                        Expand Tree: false
                        Link Tree Style: Links in Alphabetic Order
                        caster:
                          Alpha: 1
                          Show Axes: false
                          Show Trail: false
                          Value: true
                        chassis:
                          Alpha: 1
                          Show Axes: false
                          Show Trail: false
                          Value: true
                        left_wheel:
                          Alpha: 1
                          Show Axes: false
                          Show Trail: false
                          Value: true
                        lidar_link:
                          Alpha: 1
                          Show Axes: false
                          Show Trail: false
                          Value: true
                        right_wheel:
                          Alpha: 1
                          Show Axes: false
                          Show Trail: false
                          Value: true
                      Mass Properties:
                        Inertia: false
                        Mass: false
                      Name: RobotModel
                      TF Prefix: diff_drive
                      Update Interval: 0
                      Value: true
                      Visual Enabled: true
                    - Angle Tolerance: 0.10000000149011612
                      Class: rviz_default_plugins/Odometry
                      Covariance:
                        Orientation:
                          Alpha: 0.5
                          Color: 255; 255; 127
                          Color Style: Unique
                          Frame: Local
                          Offset: 1
                          Scale: 1
                          Value: true
                        Position:
                          Alpha: 0.30000001192092896
                          Color: 204; 51; 204
                          Scale: 1
                          Value: true
                        Value: true
                      Enabled: true
                      Keep: 100
                      Name: Odometry
                      Position Tolerance: 0.10000000149011612
                      Shape:
                        Alpha: 1
                        Axes Length: 1
                        Axes Radius: 0.10000000149011612
                        Color: 255; 25; 0
                        Head Length: 0.30000001192092896
                        Head Radius: 0.10000000149011612
                        Shaft Length: 1
                        Shaft Radius: 0.05000000074505806
                        Value: Arrow
                      Topic:
                        Depth: 5
                        Durability Policy: Volatile
                        Filter size: 10
                        History Policy: Keep Last
                        Reliability Policy: Reliable
                        Value: /diff_drive/odometry
                      Value: true
                    - Alpha: 1
                      Autocompute Intensity Bounds: true
                      Autocompute Value Bounds:
                        Max Value: 10
                        Min Value: -10
                        Value: true
                      Axis: Z
                      Channel Name: intensity
                      Class: rviz_default_plugins/LaserScan
                      Color: 255; 255; 255
                      Color Transformer: Intensity
                      Decay Time: 0
                      Enabled: true
                      Invert Rainbow: false
                      Max Color: 255; 255; 255
                      Max Intensity: -999999
                      Min Color: 0; 0; 0
                      Min Intensity: 999999
                      Name: LaserScan
                      Position Transformer: XYZ
                      Selectable: true
                      Size (Pixels): 3
                      Size (m): 0.009999999776482582
                      Style: Flat Squares
                      Topic:
                        Depth: 5
                        Durability Policy: Volatile
                        Filter size: 10
                        History Policy: Keep Last
                        Reliability Policy: Reliable
                        Value: /diff_drive/scan
                      Use Fixed Frame: true
                      Use rainbow: true
                      Value: true
                  Enabled: true
                  Global Options:
                    Background Color: 48; 48; 48
                    Fixed Frame: diff_drive/odom
                    Frame Rate: 30
                  Name: root
                  Tools:
                    - Class: rviz_default_plugins/Interact
                      Hide Inactive Objects: true
                    - Class: rviz_default_plugins/MoveCamera
                    - Class: rviz_default_plugins/Select
                    - Class: rviz_default_plugins/FocusCamera
                    - Class: rviz_default_plugins/Measure
                      Line color: 128; 128; 0
                    - Class: rviz_default_plugins/SetInitialPose
                      Covariance x: 0.25
                      Covariance y: 0.25
                      Covariance yaw: 0.06853891909122467
                      Topic:
                        Depth: 5
                        Durability Policy: Volatile
                        History Policy: Keep Last
                        Reliability Policy: Reliable
                        Value: /initialpose
                    - Class: rviz_default_plugins/SetGoal
                      Topic:
                        Depth: 5
                        Durability Policy: Volatile
                        History Policy: Keep Last
                        Reliability Policy: Reliable
                        Value: /goal_pose
                    - Class: rviz_default_plugins/PublishPoint
                      Single click: true
                      Topic:
                        Depth: 5
                        Durability Policy: Volatile
                        History Policy: Keep Last
                        Reliability Policy: Reliable
                        Value: /clicked_point
                  Transformation:
                    Current:
                      Class: rviz_default_plugins/TF
                  Value: true
                  Views:
                    Current:
                      Class: rviz_default_plugins/Orbit
                      Distance: 24.40549659729004
                      Enable Stereo Rendering:
                        Stereo Eye Separation: 0.05999999865889549
                        Stereo Focal Distance: 1
                        Swap Stereo Eyes: false
                        Value: false
                      Focal Point:
                        X: 0
                        Y: 0
                        Z: 0
                      Focal Shape Fixed Size: true
                      Focal Shape Size: 0.05000000074505806
                      Invert Z Axis: false
                      Name: Current View
                      Near Clip Distance: 0.009999999776482582
                      Pitch: 0.785398006439209
                      Target Frame: <Fixed Frame>
                      Value: Orbit (rviz)
                      Yaw: 0.785398006439209
                    Saved: ~
                Window Geometry:
                  Displays:
                    collapsed: false
                  Height: 1016
                  Hide Left Dock: false
                  Hide Right Dock: false
                  QMainWindow State: 000000ff00000000fd0000000400000000000001560000035afc0200000008fb0000001200530065006c0065006300740069006f006e00000001e10000009b0000005c00fffffffb0000001e0054006f006f006c002000500072006f007000650072007400690065007302000001ed000001df00000185000000a3fb000000120056006900650077007300200054006f006f02000001df000002110000018500000122fb000000200054006f006f006c002000500072006f0070006500720074006900650073003203000002880000011d000002210000017afb000000100044006900730070006c006100790073010000003d0000035a000000c900fffffffb0000002000730065006c0065006300740069006f006e00200062007500660066006500720200000138000000aa0000023a00000294fb00000014005700690064006500530074006500720065006f02000000e6000000d2000003ee0000030bfb0000000c004b0069006e0065006300740200000186000001060000030c00000261000000010000010f0000035afc0200000003fb0000001e0054006f006f006c002000500072006f00700065007200740069006500730100000041000000780000000000000000fb0000000a00560069006500770073010000003d0000035a000000a400fffffffb0000001200530065006c0065006300740069006f006e010000025a000000b200000000000000000000000200000490000000a9fc0100000001fb0000000a00560069006500770073030000004e00000080000002e10000019700000003000007360000003efc0100000002fb0000000800540069006d0065010000000000000736000002fb00fffffffb0000000800540069006d00650100000000000004500000000000000000000004c50000035a00000004000000040000000800000008fc0000000100000002000000010000000a0054006f006f006c00730100000000ffffffff0000000000000000
                  Selection:
                    collapsed: false
                  Time:
                    collapsed: false
                  Tool Properties:
                    collapsed: false
                  Views:
                    collapsed: false
                  Width: 1846
                  X: 74
                  Y: 27
                

            ‚îî‚îÄ‚îÄ rrbot.rviz
                Content:
                Panels:
                  - Class: rviz_common/Displays
                    Help Height: 78
                    Name: Displays
                    Property Tree Widget:
                      Expanded:
                        - /Global Options1
                        - /Status1
                        - /RobotModel1
                        - /RobotModel1/Status1
                      Splitter Ratio: 0.5
                    Tree Height: 542
                  - Class: rviz_common/Selection
                    Name: Selection
                  - Class: rviz_common/Tool Properties
                    Expanded:
                      - /2D Goal Pose1
                      - /Publish Point1
                    Name: Tool Properties
                    Splitter Ratio: 0.5886790156364441
                  - Class: rviz_common/Views
                    Expanded:
                      - /Current View1
                    Name: Views
                    Splitter Ratio: 0.5
                  - Class: rviz_common/Time
                    Experimental: false
                    Name: Time
                    SyncMode: 0
                    SyncSource: ""
                Visualization Manager:
                  Class: ""
                  Displays:
                    - Alpha: 0.5
                      Cell Size: 1
                      Class: rviz_default_plugins/Grid
                      Color: 160; 160; 164
                      Enabled: true
                      Line Style:
                        Line Width: 0.029999999329447746
                        Value: Lines
                      Name: Grid
                      Normal Cell Count: 0
                      Offset:
                        X: 0
                        Y: 0
                        Z: 0
                      Plane: XY
                      Plane Cell Count: 10
                      Reference Frame: <Fixed Frame>
                      Value: true
                    - Alpha: 1
                      Class: rviz_default_plugins/RobotModel
                      Collision Enabled: false
                      Description File: ""
                      Description Source: Topic
                      Description Topic:
                        Depth: 5
                        Durability Policy: Volatile
                        History Policy: Keep Last
                        Reliability Policy: Reliable
                        Value: /robot_description
                      Enabled: true
                      Links:
                        All Links Enabled: true
                        Expand Joint Details: false
                        Expand Link Details: false
                        Expand Tree: false
                        Link Tree Style: Links in Alphabetic Order
                        link1:
                          Alpha: 1
                          Show Axes: false
                          Show Trail: false
                          Value: true
                        link2:
                          Alpha: 1
                          Show Axes: false
                          Show Trail: false
                          Value: true
                        link3:
                          Alpha: 1
                          Show Axes: false
                          Show Trail: false
                          Value: true
                      Mass Properties:
                        Inertia: false
                        Mass: false
                      Name: RobotModel
                      TF Prefix: ""
                      Update Interval: 0
                      Value: true
                      Visual Enabled: true
                    - Angle Tolerance: 0.10000000149011612
                      Class: rviz_default_plugins/Odometry
                      Covariance:
                        Orientation:
                          Alpha: 0.5
                          Color: 255; 255; 127
                          Color Style: Unique
                          Frame: Local
                          Offset: 1
                          Scale: 1
                          Value: true
                        Position:
                          Alpha: 0.30000001192092896
                          Color: 204; 51; 204
                          Scale: 1
                          Value: true
                        Value: true
                      Enabled: true
                      Keep: 100
                      Name: Odometry
                      Position Tolerance: 0.10000000149011612
                      Shape:
                        Alpha: 1
                        Axes Length: 1
                        Axes Radius: 0.10000000149011612
                        Color: 255; 25; 0
                        Head Length: 0.30000001192092896
                        Head Radius: 0.10000000149011612
                        Shaft Length: 1
                        Shaft Radius: 0.05000000074505806
                        Value: Arrow
                      Topic:
                        Depth: 5
                        Durability Policy: Volatile
                        Filter size: 10
                        History Policy: Keep Last
                        Reliability Policy: Reliable
                        Value: /diff_drive/odometry
                      Value: true
                    - Alpha: 1
                      Autocompute Intensity Bounds: true
                      Autocompute Value Bounds:
                        Max Value: 10
                        Min Value: -10
                        Value: true
                      Axis: Z
                      Channel Name: intensity
                      Class: rviz_default_plugins/LaserScan
                      Color: 255; 255; 255
                      Color Transformer: Intensity
                      Decay Time: 0
                      Enabled: true
                      Invert Rainbow: false
                      Max Color: 255; 255; 255
                      Max Intensity: -999999
                      Min Color: 0; 0; 0
                      Min Intensity: 999999
                      Name: LaserScan
                      Position Transformer: XYZ
                      Selectable: true
                      Size (Pixels): 3
                      Size (m): 0.009999999776482582
                      Style: Flat Squares
                      Topic:
                        Depth: 5
                        Durability Policy: Volatile
                        Filter size: 10
                        History Policy: Keep Last
                        Reliability Policy: Reliable
                        Value: /diff_drive/scan
                      Use Fixed Frame: true
                      Use rainbow: true
                      Value: true
                  Enabled: true
                  Global Options:
                    Background Color: 48; 48; 48
                    Fixed Frame: link1
                    Frame Rate: 30
                  Name: root
                  Tools:
                    - Class: rviz_default_plugins/Interact
                      Hide Inactive Objects: true
                    - Class: rviz_default_plugins/MoveCamera
                    - Class: rviz_default_plugins/Select
                    - Class: rviz_default_plugins/FocusCamera
                    - Class: rviz_default_plugins/Measure
                      Line color: 128; 128; 0
                    - Class: rviz_default_plugins/SetInitialPose
                      Covariance x: 0.25
                      Covariance y: 0.25
                      Covariance yaw: 0.06853891909122467
                      Topic:
                        Depth: 5
                        Durability Policy: Volatile
                        History Policy: Keep Last
                        Reliability Policy: Reliable
                        Value: /initialpose
                    - Class: rviz_default_plugins/SetGoal
                      Topic:
                        Depth: 5
                        Durability Policy: Volatile
                        History Policy: Keep Last
                        Reliability Policy: Reliable
                        Value: /goal_pose
                    - Class: rviz_default_plugins/PublishPoint
                      Single click: true
                      Topic:
                        Depth: 5
                        Durability Policy: Volatile
                        History Policy: Keep Last
                        Reliability Policy: Reliable
                        Value: /clicked_point
                  Transformation:
                    Current:
                      Class: rviz_default_plugins/TF
                  Value: true
                  Views:
                    Current:
                      Class: rviz_default_plugins/Orbit
                      Distance: 10.637351989746094
                      Enable Stereo Rendering:
                        Stereo Eye Separation: 0.05999999865889549
                        Stereo Focal Distance: 1
                        Swap Stereo Eyes: false
                        Value: false
                      Focal Point:
                        X: 0
                        Y: 0
                        Z: 0
                      Focal Shape Fixed Size: true
                      Focal Shape Size: 0.05000000074505806
                      Invert Z Axis: false
                      Name: Current View
                      Near Clip Distance: 0.009999999776482582
                      Pitch: 0.48539823293685913
                      Target Frame: <Fixed Frame>
                      Value: Orbit (rviz)
                      Yaw: 0.06039798632264137
                    Saved: ~
                Window Geometry:
                  Displays:
                    collapsed: false
                  Height: 833
                  Hide Left Dock: false
                  Hide Right Dock: false
                  QMainWindow State: 000000ff00000000fd000000040000000000000156000002a7fc0200000008fb0000001200530065006c0065006300740069006f006e00000001e10000009b0000005c00fffffffb0000001e0054006f006f006c002000500072006f007000650072007400690065007302000001ed000001df00000185000000a3fb000000120056006900650077007300200054006f006f02000001df000002110000018500000122fb000000200054006f006f006c002000500072006f0070006500720074006900650073003203000002880000011d000002210000017afb000000100044006900730070006c006100790073010000003b000002a7000000c700fffffffb0000002000730065006c0065006300740069006f006e00200062007500660066006500720200000138000000aa0000023a00000294fb00000014005700690064006500530074006500720065006f02000000e6000000d2000003ee0000030bfb0000000c004b0069006e0065006300740200000186000001060000030c00000261000000010000010f000002a7fc0200000003fb0000001e0054006f006f006c002000500072006f00700065007200740069006500730100000041000000780000000000000000fb0000000a00560069006500770073010000003b000002a7000000a000fffffffb0000001200530065006c0065006300740069006f006e010000025a000000b200000000000000000000000200000490000000a9fc0100000001fb0000000a00560069006500770073030000004e00000080000002e10000019700000003000003c00000003efc0100000002fb0000000800540069006d00650100000000000003c00000025300fffffffb0000000800540069006d006501000000000000045000000000000000000000014f000002a700000004000000040000000800000008fc0000000100000002000000010000000a0054006f006f006c00730100000000ffffffff0000000000000000
                  Selection:
                    collapsed: false
                  Time:
                    collapsed: false
                  Tool Properties:
                    collapsed: false
                  Views:
                    collapsed: false
                  Width: 960
                  X: 960
                  Y: 0
                

            ‚îî‚îÄ‚îÄ ros_gz_snakebot_bridge.yaml
                Content:
                ---
                  - topic_name: "joint_state1"
                    ros_type_name: "std_msgs/msg/Float64"
                    gz_type_name: "gz.msgs.Float"
                    direction: ROS_TO_GZ
                  - topic_name: "joint_state2"
                    ros_type_name: "std_msgs/msg/Float64"
                    gz_type_name: "gz.msgs.Float"
                    direction: ROS_TO_GZ
                  - topic_name: "joint_state3"
                    ros_type_name: "std_msgs/msg/Float64"
                    gz_type_name: "gz.msgs.Float"
                    direction: ROS_TO_GZ
                  - topic_name: "joint_state4"
                    ros_type_name: "std_msgs/msg/Float64"
                    gz_type_name: "gz.msgs.Float"
                    direction: ROS_TO_GZ
                  - topic_name: "joint_state5"
                    ros_type_name: "std_msgs/msg/Float64"
                    gz_type_name: "gz.msgs.Float"
                    direction: ROS_TO_GZ
                  - topic_name: "joint_state6"
                    ros_type_name: "std_msgs/msg/Float64"
                    gz_type_name: "gz.msgs.Float"
                    direction: ROS_TO_GZ
                  - topic_name: "joint_state7"
                    ros_type_name: "std_msgs/msg/Float64"
                    gz_type_name: "gz.msgs.Float"
                    direction: ROS_TO_GZ
                  - topic_name: "joint_state8"
                    ros_type_name: "std_msgs/msg/Float64"
                    gz_type_name: "gz.msgs.Float"
                    direction: ROS_TO_GZ
                  - topic_name: "joint_state9"
                    ros_type_name: "std_msgs/msg/Float64"
                    gz_type_name: "gz.msgs.Float"
                    direction: ROS_TO_GZ
                  - topic_name: "joint_state10"
                    ros_type_name: "std_msgs/msg/Float64"
                    gz_type_name: "gz.msgs.Float"
                    direction: ROS_TO_GZ
                  - topic_name: "joint_state11"
                    ros_type_name: "std_msgs/msg/Float64"
                    gz_type_name: "gz.msgs.Float"
                    direction: ROS_TO_GZ
                  - topic_name: "joint_state12"
                    ros_type_name: "std_msgs/msg/Float64"
                    gz_type_name: "gz.msgs.Float"
                    direction: ROS_TO_GZ
                

            ‚îî‚îÄ‚îÄ ros_gz_example_bridge.yaml
                Content:
                ---
                - ros_topic_name: "/diff_drive/cmd_vel"
                  gz_topic_name: "/model/diff_drive/cmd_vel"
                  ros_type_name: "geometry_msgs/msg/Twist"
                  gz_type_name: "gz.msgs.Twist"
                  direction: ROS_TO_GZ
                - ros_topic_name: "/clock"
                  gz_topic_name: "/clock"
                  ros_type_name: "rosgraph_msgs/msg/Clock"
                  gz_type_name: "gz.msgs.Clock"
                  direction: GZ_TO_ROS
                - ros_topic_name: "/diff_drive/odometry"
                  gz_topic_name: "/model/diff_drive/odometry"
                  ros_type_name: "nav_msgs/msg/Odometry"
                  gz_type_name: "gz.msgs.Odometry"
                  direction: GZ_TO_ROS
                - ros_topic_name: "/diff_drive/scan"
                  gz_topic_name: "/scan"
                  ros_type_name: "sensor_msgs/msg/LaserScan"
                  gz_type_name: "gz.msgs.LaserScan"
                  direction: GZ_TO_ROS
                - ros_topic_name: "/joint_states"
                  gz_topic_name: "/world/demo/model/diff_drive/joint_state"
                  ros_type_name: "sensor_msgs/msg/JointState"
                  gz_type_name: "gz.msgs.Model"
                  direction: GZ_TO_ROS
                - ros_topic_name: "/tf"
                  gz_topic_name: "/model/diff_drive/pose"
                  ros_type_name: "tf2_msgs/msg/TFMessage"
                  gz_type_name: "gz.msgs.Pose_V"
                  direction: GZ_TO_ROS
                - ros_topic_name: "/tf_static"
                  gz_topic_name: "/model/diff_drive/pose_static"
                  ros_type_name: "tf2_msgs/msg/TFMessage"
                  gz_type_name: "gz.msgs.Pose_V"
                  direction: GZ_TO_ROS
                
                

    üìÅros_gz_example_gazebo
        ‚îî‚îÄ‚îÄ package.xml
            Content:
            <?xml version="1.0"?>
            <?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
            <package format="3">
              <name>ros_gz_example_gazebo</name>
              <version>0.0.0</version>
              <description>Gazebo-specific implementations for the ros_gz_example project</description>
              <maintainer email="michael@openrobotics.org">Michael Carroll</maintainer>
              <license>Apache 2.0</license>
              <author>Michael Carroll</author>
              <author>Dharini Dutia</author>
            
              <depend>ros_gz_example_description</depend>
            
              <buildtool_depend>ament_cmake</buildtool_depend>
            
              <test_depend>ament_lint_auto</test_depend>
            
              <export>
                <build_type>ament_cmake</build_type>
              </export>
            </package>
            
            

        ‚îî‚îÄ‚îÄ CMakeLists.txt
            Content:
            cmake_minimum_required(VERSION 3.5)
            
            # Following directive defines the project name.
            project(ros_gz_example_gazebo)
            
            
            # Following directives find required packages and load their configuration.
            # The 'set' directive defines a variable (e.g. 'GZ_PLUGIN_VER').
            # Such variables can be used lateron in the CMakeLists.txt file.
            find_package(ament_cmake REQUIRED)
            find_package(ros_gz_example_description REQUIRED)
            
            find_package(gz-cmake3 REQUIRED)
            find_package(gz-plugin2 REQUIRED COMPONENTS register)
            set(GZ_PLUGIN_VER ${gz-plugin2_VERSION_MAJOR})
            find_package(gz-common5 REQUIRED COMPONENTS profiler)
            set(GZ_COMMON_VER ${gz-common5_VERSION_MAJOR})
            
            # Harmonic
            if("$ENV{GZ_VERSION}" STREQUAL "harmonic")
              find_package(gz-sim8 REQUIRED)
              set(GZ_SIM_VER ${gz-sim8_VERSION_MAJOR})
              message(STATUS "Compiling against Gazebo Harmonic")
            # Default to Garden
            else()
              find_package(gz-sim8 REQUIRED)
              set(GZ_SIM_VER ${gz-sim8_VERSION_MAJOR})
              message(STATUS "Compiling against Gazebo Garden")
            endif()
            
            
            # Following 'add_library' directive defines a library target named 'BasicSystem'.
            # The 'SHARED' keyword indicates that a shared library should be compiled, and
            # is followed by the list of source files for the target.
            add_library(BasicSystem
              SHARED
              src/BasicSystem.cc
            )
            
            # Following 'target_include_directories' directive specifies 'include' as the
            # include directory to use when compiling the 'BasicSystem' target.
            # The 'PRIVATE' keyword specifies that this directive will populate the
            # INCLUDE_DIRECTORIES property for the 'BasicSystem' target.
            target_include_directories(
              BasicSystem PRIVATE include
            )
            
            # Following 'target_link_libraries' directive specifies to use the 
            # gz-sim library when linking the 'BasicSystem' target.
            # The 'PRIVATE' keyword stipulates that the gz-sim library will not
            # automatically be included if the 'BasicSystem' target were to
            # be linked to anoter target. 
            # ${GZ_SIM_VER} is substituted by the value that is was set to above.
            target_link_libraries(BasicSystem PRIVATE
              gz-sim${GZ_SIM_VER}::gz-sim${GZ_SIM_VER})
            
            
            # Following directives similarly specify another target: 'FullSystem'.
            add_library(FullSystem
              SHARED
              src/FullSystem.cc
            )
            
            target_include_directories(
              FullSystem PRIVATE include
            )
            
            target_link_libraries(FullSystem PRIVATE
              gz-sim${GZ_SIM_VER}::gz-sim${GZ_SIM_VER})
            
            
            
            # Following 'install' directive ensures that the compiled libraries
            # of the 'BasicSystem' and 'FullSystem' targets will be copied
            # to the subfolder 'lib/ros_gz_example_gazebo' of the install directory.
            install(
              TARGETS BasicSystem FullSystem
              DESTINATION lib/${PROJECT_NAME}
            )
            
            
            # Following 'install' directive ensures that the 'worlds' subfolder
            # will be copied to the 'share/ros_gz_example_gazebo/worlds'
            # subfolder of the installation directory.
            install(
              DIRECTORY worlds/
              DESTINATION share/${PROJECT_NAME}/worlds
            )
            
            
            # Following directives are used when testing.
            if(BUILD_TESTING)
              find_package(ament_lint_auto REQUIRED)
              ament_lint_auto_find_test_dependencies()
            endif()
            
            
            # Following hooks are used to ensure that the correct environment variables
            # will be set by exectuting 'sourece install/setup.bash' after compilation.
            # When using this template for your project, change the filenames of the
            # files in the 'hooks' folder, to correspond to your project name.
            ament_environment_hooks("${CMAKE_CURRENT_SOURCE_DIR}/hooks/${PROJECT_NAME}.dsv.in")
            ament_environment_hooks("${CMAKE_CURRENT_SOURCE_DIR}/hooks/${PROJECT_NAME}.sh.in")
            
            
            # Following directive configures ament based on the previous directives, and should
            # typically be the last directive in the CMakeLists.txt file.
            ament_package()
            

        ‚îî‚îÄ‚îÄ README.md
            Content:
            # ros_gz_example_gazebo
            
            This subfolder holds example source files and a corresponding `CMakeLists.txt` file, as a starting point for compiling Gazebo implementations in a personal repository (i.e. not part of the official Gazebo source repositories).
            
            The provided `CMakeLists.txt` file contains the directives to compile two example Gazebo systems: `BasicSystem` and `FullSystem`.
            
            For more information on Gazebo Sim systems, see following [Gazebo Sim tutorials](https://gazebosim.org/api/sim/7/tutorials.html):
            
            - [Create System Plugins](https://gazebosim.org/api/sim/7/createsystemplugins.html)
            - [Migration from Gazebo Classic: Plugins](https://gazebosim.org/api/sim/7/migrationplugins.html)
            
            
            ## `BasicSystem` and `FullSystem`
            
            `BasicSystem` is an example system that implements only the `ISystemPostUpdate` interface:
            
            ```c++
             class BasicSystem:
                public gz::sim::System,
                public gz::sim::ISystemPostUpdate
            ```
            
            `FullSystem` is an example system that implements all of the system interfaces:
            
            ```c++
            class FullSystem:
                public gz::sim::System,
                public gz::sim::ISystemConfigure,
                public gz::sim::ISystemPreUpdate,
                public gz::sim::ISystemUpdate,
                public gz::sim::ISystemPostUpdate,
                public gz::sim::ISystemReset
            ```
            
            See the comments in the source files for further documentation.
            
            ## `CMakeLists.txt`
            
            The provided `CMakeLists.txt` file contains comments that clarify the different sections and commands, and how to apply these to your project.

        üìÅsrc
            ‚îî‚îÄ‚îÄ BasicSystem.cc
                Content:
                /*
                 * Copyright (C) 2022 Open Source Robotics Foundation
                 *
                 * Licensed under the Apache License, Version 2.0 (the "License");
                 * you may not use this file except in compliance with the License.
                 * You may obtain a copy of the License at
                 *
                 *     http://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing, software
                 * distributed under the License is distributed on an "AS IS" BASIS,
                 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                 * See the License for the specific language governing permissions and
                 * limitations under the License.
                 *
                */
                
                // We'll use a string and the gzmsg command below for a brief example.
                // Remove these includes if your plugin doesn't need them.
                #include <string>
                #include <gz/common/Console.hh>
                
                // This header is required to register plugins. It's good practice to place it
                // in the cc file, like it's done here.
                #include <gz/plugin/Register.hh>
                
                // Don't forget to include the plugin's header.
                #include "ros_gz_example_gazebo/BasicSystem.hh"
                
                // This is required to register the plugin. Make sure the interfaces match
                // what's in the header.
                GZ_ADD_PLUGIN(
                    ros_gz_example_gazebo::BasicSystem,
                    gz::sim::System,
                    ros_gz_example_gazebo::BasicSystem::ISystemPostUpdate)
                
                namespace ros_gz_example_gazebo 
                {
                
                void BasicSystem::PostUpdate(const gz::sim::UpdateInfo &_info,
                                             const gz::sim::EntityComponentManager &_ecm)
                {
                  if (!_info.paused && _info.iterations % 1000 == 0)
                  {
                    gzdbg << "ros_gz_example_gazebo::BasicSystem::PostUpdate" << std::endl;
                  }
                }
                
                }  // namespace ros_gz_example_gazebo
                

            ‚îî‚îÄ‚îÄ FullSystem.cc
                Content:
                /*
                 * Copyright (C) 2022 Open Source Robotics Foundation
                 *
                 * Licensed under the Apache License, Version 2.0 (the "License");
                 * you may not use this file except in compliance with the License.
                 * You may obtain a copy of the License at
                 *
                 *     http://www.apache.org/licenses/LICENSE-2.0
                 *
                 * Unless required by applicable law or agreed to in writing, software
                 * distributed under the License is distributed on an "AS IS" BASIS,
                 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                 * See the License for the specific language governing permissions and
                 * limitations under the License.
                 *
                */
                
                // We'll use a string and the gzmsg command below for a brief example.
                // Remove these includes if your plugin doesn't need them.
                #include <string>
                #include <gz/common/Console.hh>
                
                // This header is required to register plugins. It's good practice to place it
                // in the cc file, like it's done here.
                #include <gz/plugin/Register.hh>
                
                // Don't forget to include the plugin's header.
                #include "ros_gz_example_gazebo/FullSystem.hh"
                
                // This is required to register the plugin. Make sure the interfaces match
                // what's in the header.
                GZ_ADD_PLUGIN(
                    ros_gz_example_gazebo::FullSystem,
                    gz::sim::System,
                    ros_gz_example_gazebo::FullSystem::ISystemConfigure,
                    ros_gz_example_gazebo::FullSystem::ISystemPreUpdate,
                    ros_gz_example_gazebo::FullSystem::ISystemUpdate,
                    ros_gz_example_gazebo::FullSystem::ISystemPostUpdate,
                    ros_gz_example_gazebo::FullSystem::ISystemReset
                )
                
                namespace ros_gz_example_gazebo 
                {
                
                void FullSystem::Configure(const gz::sim::Entity &_entity,
                                const std::shared_ptr<const sdf::Element> &_element,
                                gz::sim::EntityComponentManager &_ecm,
                                gz::sim::EventManager &_eventManager)
                {
                  gzdbg << "ros_gz_example_gazebo::FullSystem::Configure on entity: " << _entity << std::endl;
                }
                
                void FullSystem::PreUpdate(const gz::sim::UpdateInfo &_info,
                                           gz::sim::EntityComponentManager &_ecm)
                {
                  if (!_info.paused && _info.iterations % 1000 == 0)
                  {
                    gzdbg << "ros_gz_example_gazebo::FullSystem::PreUpdate" << std::endl;
                  }
                }
                
                void FullSystem::Update(const gz::sim::UpdateInfo &_info,
                                        gz::sim::EntityComponentManager &_ecm)
                {
                  if (!_info.paused && _info.iterations % 1000 == 0)
                  {
                    gzdbg << "ros_gz_example_gazebo::FullSystem::Update" << std::endl;
                  }
                }
                
                void FullSystem::PostUpdate(const gz::sim::UpdateInfo &_info,
                                            const gz::sim::EntityComponentManager &_ecm) 
                {
                  if (!_info.paused && _info.iterations % 1000 == 0)
                  {
                    gzdbg << "ros_gz_example_gazebo::FullSystem::PostUpdate" << std::endl;
                  }
                }
                
                void FullSystem::Reset(const gz::sim::UpdateInfo &_info,
                                       gz::sim::EntityComponentManager &_ecm)
                {
                  gzdbg << "ros_gz_example_gazebo::FullSystem::Reset" << std::endl;
                }
                }  // namespace ros_gz_example_gazebo
                

        üìÅhooks
            ‚îî‚îÄ‚îÄ ros_gz_example_gazebo.dsv.in
                Content:
                prepend-non-duplicate;GZ_SIM_RESOURCE_PATH;share/@PROJECT_NAME@/worlds
                prepend-non-duplicate;GZ_SIM_SYSTEM_PLUGIN_PATH;lib/@PROJECT_NAME@/
                

            ‚îî‚îÄ‚îÄ README.md
                Content:
                # Hooks
                
                The `ament_environment_hooks` is a feature of `ament` that allows users to set arbitrary environment variables as part of sourcing the environment. It is briefly documented [here](https://docs.ros.org/en/rolling/How-To-Guides/Ament-CMake-Documentation.html#adding-to-the-ament-index).
                
                In practice, this means that variables that are set in that folder are set when you call `setup.sh` or are set when dependent packages are being built.
                
                These are populated and installed as part of these function calls:
                
                ```txt
                 # The following hooks are used to ensure that the correct environment variables 
                 # will be set by executing 'source install/setup.bash' after compilation. 
                 # When using this template for your project, change the filenames of the 
                 # files in the 'hooks' folder, to correspond to your project name. 
                ament_environment_hooks("${CMAKE_CURRENT_SOURCE_DIR}/hooks/${PROJECT_NAME}.dsv.in")
                ament_environment_hooks("${CMAKE_CURRENT_SOURCE_DIR}/hooks/${PROJECT_NAME}.sh.in")
                ```
                
                where the `.in` suffix causes them to be pre-processed by CMake's [configure_file](https://cmake.org/cmake/help/latest/command/configure_file.html) call.
                
                The actual implementation of `ament_environment_hook` is [here](https://github.com/ament/ament_cmake/blob/master/ament_cmake_core/cmake/environment_hooks/ament_environment_hooks.cmake) if that is also helpful in understanding.
                
                Specifically for this project, we set the environment variables:
                
                - `GZ_SIM_RESOURCE_PATH` - this appends the paths to world and model files such Gazebo can find them at runtime
                - `GZ_SIM_SYSTEM_PLUGIN_PATH` - this appends the paths to system plugin shared libraries such that Gazebo can find them at runtime.
                
                The two template files are:
                
                - `.sh` - This will be evaluated by Linux/macOS shells (sh, bash, zsh, etc).
                - `.dsv` - This is a machine-readable format of the expected environment changes that ament will take advantage of for performance (faster than sourcing shell scripts, in general). You can read more about this here: [generate .dsv files beside known environment hooks ament/ament_cmake#187](https://github.com/ament/ament_cmake/pull/187) and here: [improve performance when setting up environment ros2/ros2#764](https://github.com/ros2/ros2/issues/764)

            ‚îî‚îÄ‚îÄ ros_gz_example_gazebo.sh.in
                Content:
                ament_prepend_unique_value GZ_SIM_RESOURCE_PATH "$AMENT_CURRENT_PREFIX/share/@PROJECT_NAME@/worlds"
                ament_prepend_unique_value GZ_SIM_PLUGIN_PATH "$AMENT_CURRENT_PREFIX/lib/@PROJECT_NAME@"
                

        üìÅworlds
            ‚îî‚îÄ‚îÄ diff_drive.sdf
                Content:
                <?xml version="1.0" ?>
                <!--
                  Try sending commands:
                    gz topic -t "/model/diff_drive/cmd_vel" -m gz.msgs.Twist -p "linear: {x: 1.0}, angular: {z: -0.1}"
                    ros2 topic pub /diff_drive/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 5.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: -0.1}}"
                  Listen to odometry:
                    gz topic -e -t /model/diff_drive/odometry
                    ros2 topic echo /model/diff_drive/odometry
                -->
                <sdf version="1.8">
                  <world name="demo">
                    <plugin
                      filename="gz-sim-physics-system"
                      name="gz::sim::systems::Physics">
                    </plugin>
                    <plugin
                      filename="gz-sim-sensors-system"
                      name="gz::sim::systems::Sensors">
                      <render_engine>ogre2</render_engine>
                    </plugin>
                    <plugin
                      filename="gz-sim-scene-broadcaster-system"
                      name="gz::sim::systems::SceneBroadcaster">
                    </plugin>
                    <plugin
                      filename="gz-sim-user-commands-system"
                      name="gz::sim::systems::UserCommands">
                    </plugin>
                    <plugin
                      filename="BasicSystem"
                      name="ros_gz_example_gazebo::BasicSystem">
                    </plugin>
                    <plugin
                      filename="FullSystem"
                      name="ros_gz_example_gazebo::FullSystem">
                    </plugin>
                
                    <light name="sun" type="directional">
                      <cast_shadows>true</cast_shadows>
                      <pose>0 0 10 0 0 0</pose>
                      <diffuse>0.8 0.8 0.8 1</diffuse>
                      <specular>0.2 0.2 0.2 1</specular>
                      <attenuation>
                        <range>1000</range>
                        <constant>0.9</constant>
                        <linear>0.01</linear>
                        <quadratic>0.001</quadratic>
                      </attenuation>
                      <direction>-0.5 0.1 -0.9</direction>
                    </light>
                
                    <model name="ground_plane">
                      <static>true</static>
                      <link name="link">
                        <collision name="collision">
                          <geometry>
                            <plane>
                              <normal>0 0 1</normal>
                              <size>100 100</size>
                            </plane>
                          </geometry>
                        </collision>
                        <visual name="visual">
                          <geometry>
                            <plane>
                              <normal>0 0 1</normal>
                              <size>100 100</size>
                            </plane>
                          </geometry>
                          <material>
                            <ambient>0.8 0.8 0.8 1</ambient>
                            <diffuse>0.8 0.8 0.8 1</diffuse>
                            <specular>0.8 0.8 0.8 1</specular>
                          </material>
                        </visual>
                      </link>
                    </model>
                
                    <model name="diff_drive">
                      <self_collide>true</self_collide>
                      <pose>0 0 0.35 0 0 0</pose>
                      <include merge="true">
                        <uri>package://ros_gz_example_description/models/diff_drive</uri>
                      </include>
                
                      <plugin
                        filename="gz-sim-joint-state-publisher-system"
                        name="gz::sim::systems::JointStatePublisher">
                      </plugin>
                
                      <plugin
                        filename="gz-sim-pose-publisher-system"
                        name="gz::sim::systems::PosePublisher">
                        <publish_link_pose>true</publish_link_pose>
                        <use_pose_vector_msg>true</use_pose_vector_msg>
                        <static_publisher>true</static_publisher>
                        <static_update_frequency>1</static_update_frequency>
                      </plugin>
                
                      <plugin
                        filename="gz-sim-odometry-publisher-system"
                        name="gz::sim::systems::OdometryPublisher">
                        <odom_frame>diff_drive/odom</odom_frame>
                        <robot_base_frame>diff_drive</robot_base_frame>
                      </plugin>
                    </model>
                
                  </world>
                </sdf>
                

        üìÅinclude
            üìÅros_gz_example_gazebo
                ‚îî‚îÄ‚îÄ BasicSystem.hh
                    Content:
                    /*
                     * Copyright (C) 2022 Open Source Robotics Foundation
                     *
                     * Licensed under the Apache License, Version 2.0 (the "License");
                     * you may not use this file except in compliance with the License.
                     * You may obtain a copy of the License at
                     *
                     *     http://www.apache.org/licenses/LICENSE-2.0
                     *
                     * Unless required by applicable law or agreed to in writing, software
                     * distributed under the License is distributed on an "AS IS" BASIS,
                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                     * See the License for the specific language governing permissions and
                     * limitations under the License.
                     *
                    */
                    
                    #ifndef ROS_GZ_EXAMPLE_GAZEBO__BASIC_SYSTEM_HH_
                    #define ROS_GZ_EXAMPLE_GAZEBO__BASIC_SYSTEM_HH_
                    
                    // The only required include in the header is this one.
                    // All others will depend on what your plugin does.
                    #include <gz/sim/System.hh>
                    
                    namespace ros_gz_example_gazebo
                    {
                      // This is the main plugin's class. It must inherit from System and at least
                      // one other interface.
                      // Here we use `ISystemPostUpdate`, which is used to get results after
                      // physics runs. The opposite of that, `ISystemPreUpdate`, would be used by
                      // plugins that want to send commands.
                      class BasicSystem:
                        public gz::sim::System,
                        public gz::sim::ISystemPostUpdate
                      {
                        // Plugins inheriting ISystemPostUpdate must implement the PostUpdate
                        // callback. This is called at every simulation iteration after the physics
                        // updates the world. The _info variable provides information such as time,
                        // while the _ecm provides an interface to all entities and components in
                        // simulation.
                        public: void PostUpdate(const gz::sim::UpdateInfo &_info,
                                    const gz::sim::EntityComponentManager &_ecm) override;
                      };
                    }
                    #endif
                    

                ‚îî‚îÄ‚îÄ FullSystem.hh
                    Content:
                    /*
                     * Copyright (C) 2022 Open Source Robotics Foundation
                     *
                     * Licensed under the Apache License, Version 2.0 (the "License");
                     * you may not use this file except in compliance with the License.
                     * You may obtain a copy of the License at
                     *
                     *     http://www.apache.org/licenses/LICENSE-2.0
                     *
                     * Unless required by applicable law or agreed to in writing, software
                     * distributed under the License is distributed on an "AS IS" BASIS,
                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                     * See the License for the specific language governing permissions and
                     * limitations under the License.
                     *
                    */
                    
                    #ifndef ROS_GZ_EXAMPLE_GAZEBO__FULL_SYSTEM_HH_
                    #define ROS_GZ_EXAMPLE_GAZEBO__FULL_SYSTEM_HH_
                    
                    // The only required include in the header is this one.
                    // All others will depend on what your plugin does.
                    #include <gz/sim/EventManager.hh>
                    #include <gz/sim/System.hh>
                    
                    namespace ros_gz_example_gazebo
                    {
                      // This is the main plugin's class. It must inherit from System and at least
                      // one other interface.
                      // Here we use `ISystemPostUpdate`, which is used to get results after
                      // physics runs. The opposite of that, `ISystemPreUpdate`, would be used by
                      // plugins that want to send commands.
                      class FullSystem:
                        public gz::sim::System,
                        public gz::sim::ISystemConfigure,
                        public gz::sim::ISystemPreUpdate,
                        public gz::sim::ISystemUpdate,
                        public gz::sim::ISystemPostUpdate,
                        public gz::sim::ISystemReset
                      {
                        // Plugins inheriting ISystemConfigure must implement the Configure 
                        // callback. This is called when a system is initially loaded. 
                        // The _entity variable contains the entity that the system is attached to
                        // The _element variable contains the sdf Element with custom configuration
                        // The _ecm provides an interface to all entities and components
                        // The _eventManager provides a mechanism for registering internal signals
                        public: void Configure(
                                    const gz::sim::Entity &_entity,
                                    const std::shared_ptr<const sdf::Element> &_element,
                                    gz::sim::EntityComponentManager &_ecm,
                                    gz::sim::EventManager &_eventManager) override;
                    
                        // Plugins inheriting ISystemPreUpdate must implement the PreUpdate
                        // callback. This is called at every simulation iteration before the physics
                        // updates the world. The _info variable provides information such as time,
                        // while the _ecm provides an interface to all entities and components in
                        // simulation.
                        public: void PreUpdate(const gz::sim::UpdateInfo &_info,
                                    gz::sim::EntityComponentManager &_ecm) override;
                    
                        // Plugins inheriting ISystemUpdate must implement the Update
                        // callback. This is called at every simulation iteration before the physics
                        // updates the world. The _info variable provides information such as time,
                        // while the _ecm provides an interface to all entities and components in
                        // simulation.
                        public: void Update(const gz::sim::UpdateInfo &_info,
                                    gz::sim::EntityComponentManager &_ecm) override;
                    
                        // Plugins inheriting ISystemPostUpdate must implement the PostUpdate
                        // callback. This is called at every simulation iteration after the physics
                        // updates the world. The _info variable provides information such as time,
                        // while the _ecm provides an interface to all entities and components in
                        // simulation.
                        public: void PostUpdate(const gz::sim::UpdateInfo &_info,
                                    const gz::sim::EntityComponentManager &_ecm) override;
                    
                        // Plugins inheriting ISystemReset must implement the Reset callback. 
                        // This is called when simulation is reset/rewound to initial conditions.
                        public: void Reset(const gz::sim::UpdateInfo &_info,
                                    gz::sim::EntityComponentManager &_ecm) override;
                      };
                    }
                    #endif
                    

    üìÅros_gz_example_application
        ‚îî‚îÄ‚îÄ package.xml
            Content:
            <?xml version="1.0"?>
            <?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
            <package format="3">
              <name>ros_gz_example_application</name>
              <version>0.0.0</version>
              <description>Application-specific implementations for the ros_gz_project example</description>
              <maintainer email="michael@openrobotics.org">Michael Carroll</maintainer>
              <license>Apache 2.0</license>
              <author>Michael Carroll</author>
              <author>Dharini Dutia</author>
            
              <buildtool_depend>ament_cmake</buildtool_depend>
            
              <test_depend>ament_lint_auto</test_depend>
            
              <export>
                <build_type>ament_cmake</build_type>
              </export>
            </package>
            
            

        ‚îî‚îÄ‚îÄ CMakeLists.txt
            Content:
            cmake_minimum_required(VERSION 3.5)
            project(ros_gz_example_application)
            
            # Find required packages
            find_package(ament_cmake REQUIRED)
            find_package(rclpy REQUIRED)
            
            # Install Python scripts
            install(
              PROGRAMS
                src/publish_joint_angles.py  # List your Python node(s) here
              DESTINATION lib/${PROJECT_NAME}  # Install to the appropriate ROS 2 path
            )
            
            # Declare this as a ROS 2 package
            ament_package()
            

        üìÅsrc
            ‚îî‚îÄ‚îÄ test.py
                Content:
                '''
                new estimation method, sacrifices some accuracy for simpler and faster code
                '''
                import numpy as np
                import matplotlib.pyplot as plt
                from math import atan
                from math import sqrt
                from mpl_toolkits import mplot3d
                from matplotlib.animation import FuncAnimation
                from scipy.interpolate import splprep, splev
                
                
                
                # Example of how to call the points function
                # spline_func should be a function that returns x, y, z given a parameter `u`
                def spline_func(u):
                    return splev(u, tck)  # Assuming you have tck from splprep
                
                def euclidean_distance(p1, p2):
                    return np.sqrt(np.sum((p1 - p2) ** 2))
                # Initial point on the curve
                x0, y0, z0 = 0, 0, 0  # You should choose an appropriate starting point
                
                n=1
                answers = []
                error_margin=5
                still_not_found =True
                answers.append([x0,y0,z0])
                colors =['red','blue']
                
                # User inputs for required number of segments, length, amplitudes, wavelength, and error margin
                # req_rods=int(input("Enter the required number of segments: "))
                req_length = float(input("Enter the required length between two servo joints: "))
                req_amplitude_z = float(input("Enter the required amplitude in the z axis:"))
                req_amplitude_y = float(input("Enter the required amplitude in the y axis:"))
                want_sine_wave = input("do u want the sine wave plotted as well?(y/n)")
                
                
                num_path_points = int(input("Enter the number of points: "))
                
                # Initialize lists to store x and y coordinates
                path_points_x = [0]
                path_points_y = [0]
                
                # Take input for the coordinates
                for i in range(num_path_points):
                    x = float(input(f"Enter x-coordinate of point {i+1}: "))
                    y = float(input(f"Enter y-coordinate of point {i+1}: "))
                    path_points_x.append(x)
                    path_points_y.append(y)
                
                
                # Convert lists to a numpy array
                points = np.array([path_points_x, path_points_y])
                
                # Create a parameterized spline
                tck, u = splprep(points, s=0)
                
                # Generate points along the spline
                u_new = np.linspace(0, 1, 100000)  # 10000 points along the spline, to increase accuracy(making it slower) just make that number larger(probably alsso change u from 0 to 1, to 2)
                x_new, y_new = splev(u_new, tck)
                
                # Calculate the derivatives (tangent vectors) along the spline
                dx, dy = splev(u_new, tck, der=1)
                
                # Normalize the tangent vectors
                magnitude = np.sqrt(dx**2 + dy**2)
                dx_normalized = -dy / magnitude
                dy_normalized = dx / magnitude
                
                # Set initial amplitude and frequency
                amplitude = 0.5
                frequency = float(input("Enter the frequency(number of sine waves ): ")) #I know that ive named it wavelength, but for some reason still sort of acting like frequency
                
                # Create a 3D plot
                fig = plt.figure()
                ax = fig.add_subplot(111, projection='3d')
                plt.subplots_adjust(left=0.1, bottom=0.25)
                
                # Set equal aspect ratio
                ax.set_box_aspect([1, 1, 1])  # Aspect ratio is 1:1:1 in x:y:z
                
                # Plot the original spline in 3D (XY plane)
                ax.plot(x_new, y_new, np.zeros_like(x_new), label='Original Spline', color='red')
                
                
                #plotting sine wave
                # Initial sine wave plot in 3D
                x_sine_wave = x_new + req_amplitude_y * np.sin(2 * np.pi *frequency * u_new) * dx_normalized
                y_sine_wave = y_new + req_amplitude_y * np.sin(2 * np.pi *frequency * u_new) * dy_normalized
                z_wave = req_amplitude_z * np.abs(np.sin(2 * np.pi *frequency * u_new))
                
                sine_wave_line, = ax.plot(x_sine_wave, y_sine_wave, z_wave, label='3D Spline with Sine Waves', color='green')
                print(type(x_sine_wave),type(y_sine_wave))
                print(x_sine_wave[1])
                
                xyz = [[x_sine_wave[i], y_sine_wave[i], z_wave[i]] for i in range(len(x_sine_wave))]
                xyz2=np.transpose(np.array([x_sine_wave,y_sine_wave,z_wave]))
                answers.append(np.array([0,0,0]))
                print(xyz2[-1])
                for i in range(len(x_sine_wave)):
                    if(sqrt((x_sine_wave[i]-answers[-1][0])**2+(y_sine_wave[i]-answers[-1][1])**2+(z_wave[i]-answers[-1][2])**2)>req_length):
                        answers.append([x_sine_wave[i],y_sine_wave[i],z_wave[i]])
                    # else:
                        # print("hi")
                answers=np.array(answers)
                # print(answers)
                ans_x=answers[:,0]
                ans_y=answers[:,1]
                ans_z=answers[:,2]
                # print(ans_x)
                ax.plot(ans_x,ans_y,ans_z,'bo-',label=f'Segments along path')
                max_dist =max(max(path_points_x),max(path_points_y))
                ax.set_xlim(0,max_dist)
                ax.set_ylim(0,max_dist)
                ax.set_zlim(0,max_dist)
                
                angles_ground_apparent =[]
                angles_ground_real=[]
                angles_relative=[]
                angles_real =[]
                for i in range(0,len(answers)-1):
                    # Calculate angles relative to the ground and relative to previous segment
                    angles_ground_apparent.append([atan((answers[i+1][2]-answers[i][2])/(answers[i+1][0]-answers[i][0]))*180/np.pi,atan((answers[i+1][1]-answers[i][1])/(answers[i+1][0]-answers[i][0]))*180/np.pi])
                    #still needs to be verified if this is correct way of finding the real angles
                    angles_ground_real.append([atan((answers[i+1][2]-answers[i][2])/sqrt((answers[i+1][0]-answers[i][0])**2+(answers[i+1][1]-answers[i][1])**2))*180/np.pi,atan((answers[i+1][1]-answers[i][1])/sqrt((answers[i+1][0]-answers[i][0])**2+(answers[i+1][2]-answers[i][2])**2))*180/np.pi])
                    if i:
                        angles_relative.append(tuple([round(180+angles_ground_apparent[i][0]-angles_ground_apparent[i-1][0],3),round(180+angles_ground_apparent[i][1]-angles_ground_apparent[i-1][1],3)]))
                        angles_real.append(tuple([round(180+angles_ground_real[i][0]-angles_ground_real[i-1][0],3),round(180+angles_ground_real[i][1]-angles_ground_real[i-1][1],3)]))
                print("The real angles are:")
                for item in angles_real:
                    print(item[0])
                    print(item[1])
                # print("The apparent angles are:")
                # for item in angles_relative:
                    # print(item)
                
                

            ‚îî‚îÄ‚îÄ angle_viz.py
                Content:
                import numpy as np
                import matplotlib.pyplot as plt
                from math import atan, sqrt
                from mpl_toolkits import mplot3d
                from scipy.interpolate import splprep, splev
                
                # Hardcoded input values
                req_length = 10  # Required length between two servo joints
                req_amplitude_z = 5  # Required amplitude in the z-axis
                req_amplitude_y = 3  # Required amplitude in the y-axis
                want_sine_wave = 'y'  # Whether to plot the sine wave
                num_path_points = 4  # Number of path points
                
                # Hardcoded path coordinates
                path_points_x = [0, 10, 20, 30]
                path_points_y = [0, 5, 10, 15]
                
                # Hardcoded sine wave frequency
                frequency = 2  # Number of sine wave cycles
                
                # Convert lists to a numpy array
                points = np.array([path_points_x, path_points_y])
                
                # Create a parameterized spline
                tck, u = splprep(points, s=0)
                
                # Generate points along the spline
                u_new = np.linspace(0, 1, 100000)  # 100,000 points along the spline
                x_new, y_new = splev(u_new, tck)
                
                # Calculate the derivatives (tangent vectors) along the spline
                dx, dy = splev(u_new, tck, der=1)
                
                # Normalize the tangent vectors
                magnitude = np.sqrt(dx**2 + dy**2)
                dx_normalized = -dy / magnitude
                dy_normalized = dx / magnitude
                
                # Create a 3D plot
                fig = plt.figure()
                ax = fig.add_subplot(111, projection='3d')
                plt.subplots_adjust(left=0.1, bottom=0.25)
                
                # Set equal aspect ratio
                ax.set_box_aspect([1, 1, 1])  # Aspect ratio is 1:1:1 in x:y:z
                
                # Plot the original spline in 3D (XY plane)
                ax.plot(x_new, y_new, np.zeros_like(x_new), label='Original Spline', color='red')
                
                # Plotting sine wave
                x_sine_wave = x_new + req_amplitude_y * np.sin(2 * np.pi * frequency * u_new) * dx_normalized
                y_sine_wave = y_new + req_amplitude_y * np.sin(2 * np.pi * frequency * u_new) * dy_normalized
                z_wave = req_amplitude_z * np.abs(np.sin(2 * np.pi * frequency * u_new))
                
                sine_wave_line, = ax.plot(x_sine_wave, y_sine_wave, z_wave, label='3D Spline with Sine Waves', color='green')
                
                # Segments based on required length
                answers = [[0, 0, 0]]
                for i in range(len(x_sine_wave)):
                    if sqrt((x_sine_wave[i] - answers[-1][0])**2 +
                            (y_sine_wave[i] - answers[-1][1])**2 +
                            (z_wave[i] - answers[-1][2])**2) > req_length:
                        answers.append([x_sine_wave[i], y_sine_wave[i], z_wave[i]])
                
                answers = np.array(answers)
                ans_x = answers[:, 0]
                ans_y = answers[:, 1]
                ans_z = answers[:, 2]
                ax.plot(ans_x, ans_y, ans_z, 'bo-', label=f'Segments along path')
                
                # Set limits for 3D plot
                max_dist = max(max(path_points_x), max(path_points_y))
                ax.set_xlim(0, max_dist)
                ax.set_ylim(0, max_dist)
                ax.set_zlim(0, max_dist)
                
                # Calculate angles
                angles_ground_apparent = []
                angles_ground_real = []
                angles_relative = []
                angles_real = []
                for i in range(0, len(answers) - 1):
                    angles_ground_apparent.append([
                        atan((answers[i + 1][2] - answers[i][2]) / (answers[i + 1][0] - answers[i][0])) * 180 / np.pi,
                        atan((answers[i + 1][1] - answers[i][1]) / (answers[i + 1][0] - answers[i][0])) * 180 / np.pi
                    ])
                    angles_ground_real.append([
                        atan((answers[i + 1][2] - answers[i][2]) / sqrt((answers[i + 1][0] - answers[i][0])**2 + (answers[i + 1][1] - answers[i][1])**2)) * 180 / np.pi,
                        atan((answers[i + 1][1] - answers[i][1]) / sqrt((answers[i + 1][0] - answers[i][0])**2 + (answers[i + 1][2] - answers[i][2])**2)) * 180 / np.pi
                    ])
                    if i:
                        angles_relative.append(tuple([
                            round(180 + angles_ground_apparent[i][0] - angles_ground_apparent[i - 1][0], 3),
                            round(180 + angles_ground_apparent[i][1] - angles_ground_apparent[i - 1][1], 3)
                        ]))
                        angles_real.append(tuple([
                            round(180 + angles_ground_real[i][0] - angles_ground_real[i - 1][0], 3),
                            round(180 + angles_ground_real[i][1] - angles_ground_real[i - 1][1], 3)
                        ]))
                
                print("The real angles are:")
                for item in angles_real:
                    print(item)
                print("The apparent angles are:")
                for item in angles_relative:
                    print(item)
                
                # Finalize plot
                plt.legend()
                plt.grid(True)
                plt.show()
                

            ‚îî‚îÄ‚îÄ publish_joint_angles.py
                Content:
                #!/usr/bin/env python3
                
                import rclpy
                import math
                from rclpy.node import Node
                from std_msgs.msg import Float64
                from PyQt5.QtWidgets import QApplication, QMainWindow, QSlider, QLabel, QVBoxLayout, QWidget, QHBoxLayout
                from PyQt5.QtCore import Qt, QTimer
                from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
                from matplotlib.figure import Figure
                import numpy as np
                
                
                class SnakeMovementController(Node):
                
                    def __init__(self):
                        super().__init__('snake_movement_controller')
                
                        # Define publishers for each joint (1 to 12)
                        self.joint_publishers = []
                        for i in range(1, 13):  # 12 joints
                            topic_name = f'/joint_state{i}'
                            publisher = self.create_publisher(Float64, topic_name, 10)
                            self.joint_publishers.append(publisher)
                
                        # Initialize parameters for CPG
                        self.amplitude = 30  # Amplitude of joint angle in degrees
                        self.frequency = 0.5  # Frequency of oscillation in Hz
                        self.phase_shift = math.pi / 6  # Phase shift between joints
                        self.time = 0  # Time variable for the sinusoidal wave
                
                        # Initialize timers to call the movement function
                        self.timer = self.create_timer(0.1, self.update_joint_angles)  # 10Hz update rate
                
                        # Store joint angles for plotting
                        self.joint_angles = [0] * 12
                
                    def update_joint_angles(self):
                        """
                        Update joint angles based on a CPG model (sinusoidal functions).
                        This will simulate a wave-like motion for the snake robot.
                        """
                        for joint_num in range(12):  # Loop through 12 joints
                            # Calculate the phase shift for each joint
                            phase = joint_num * self.phase_shift
                
                            # Calculate the angle using a sinusoidal function for the CPG
                            angle = self.amplitude * math.sin(2 * math.pi * self.frequency * self.time + phase)
                
                            # Keep the joint angle within the range (-180 to 180 degrees)
                            angle = max(min(angle, 180), -180)
                
                            # Convert the angle from degrees to radians
                            angle_rad = math.radians(angle)
                
                            # Update joint angle for plotting
                            self.joint_angles[joint_num] = angle_rad
                
                            # Set the joint's angle for movement control
                            joint_state_msg = Float64()
                            joint_state_msg.data = angle_rad  # Control robot movement based on the angle in radians
                            self.joint_publishers[joint_num].publish(joint_state_msg)
                
                        # Increment time for the next wave cycle
                        self.time += 0.1  # Increment time by 0.1 seconds for the next loop
                
                
                class ControlGUI(QMainWindow):
                    def __init__(self, movement_controller):
                        super().__init__()
                        self.controller = movement_controller
                        self.setWindowTitle("Snake Robot Control Panel")
                
                        # Create sliders for amplitude, frequency, and phase shift
                        self.amplitude_slider = self.create_slider("Amplitude", 0, 300, self.controller.amplitude, self.update_amplitude)
                        self.frequency_slider = self.create_slider("Frequency", 1, 20, int(self.controller.frequency * 10), self.update_frequency)
                        self.phase_slider = self.create_slider("Phase Shift", 0, 360, int(math.degrees(self.controller.phase_shift)), self.update_phase_shift)
                
                        # Create a layout for sliders
                        slider_layout = QVBoxLayout()
                        slider_layout.addWidget(self.amplitude_slider["label"])
                        slider_layout.addWidget(self.amplitude_slider["slider"])
                        slider_layout.addWidget(self.frequency_slider["label"])
                        slider_layout.addWidget(self.frequency_slider["slider"])
                        slider_layout.addWidget(self.phase_slider["label"])
                        slider_layout.addWidget(self.phase_slider["slider"])
                
                        # Add plotting canvas
                        self.plot_canvas = PlotCanvas(self.controller)
                        plot_layout = QVBoxLayout()
                        plot_layout.addWidget(self.plot_canvas)
                
                        # Combine sliders and plot in a horizontal layout
                        main_layout = QHBoxLayout()
                        main_layout.addLayout(slider_layout)
                        main_layout.addLayout(plot_layout)
                
                        # Set the central widget
                        container = QWidget()
                        container.setLayout(main_layout)
                        self.setCentralWidget(container)
                
                        # Update the plot regularly
                        self.plot_timer = QTimer(self)
                        self.plot_timer.timeout.connect(self.plot_canvas.update_plot)
                        self.plot_timer.start(100)  # Update every 100 ms
                
                    def create_slider(self, name, min_val, max_val, init_val, callback):
                        label = QLabel(f"{name}: {init_val}")
                        slider = QSlider(Qt.Horizontal)
                        slider.setMinimum(min_val)
                        slider.setMaximum(max_val)
                        slider.setValue(init_val)
                        slider.valueChanged.connect(lambda value: callback(value, label))
                        return {"label": label, "slider": slider}
                
                    def update_amplitude(self, value, label):
                        self.controller.amplitude = value
                        label.setText(f"Amplitude: {value}")
                
                    def update_frequency(self, value, label):
                        self.controller.frequency = value / 10.0
                        label.setText(f"Frequency: {self.controller.frequency:.1f}")
                
                    def update_phase_shift(self, value, label):
                        self.controller.phase_shift = math.radians(value)
                        label.setText(f"Phase Shift: {value}¬∞")
                
                
                class PlotCanvas(FigureCanvas):
                    def __init__(self, controller):
                        self.controller = controller
                        self.fig = Figure()
                        self.ax = self.fig.add_subplot(111)
                        super().__init__(self.fig)
                
                        self.time_data = np.linspace(0, 1, 12)  # X-axis for joint numbers
                        self.angle_data = [0] * 12  # Y-axis for joint angles
                
                        # Initial plot
                        self.line, = self.ax.plot(self.time_data, self.angle_data, marker='o', label='Joint Angles')
                        self.ax.set_title("Joint Angles")
                        self.ax.set_xlabel("Joint Number")
                        self.ax.set_ylabel("Angle (radians)")
                        self.ax.set_ylim(-math.pi, math.pi)
                        self.ax.legend()
                
                    def update_plot(self):
                        self.angle_data = self.controller.joint_angles
                        self.line.set_ydata(self.angle_data)
                        self.fig.canvas.draw()
                
                
                def main(args=None):
                    rclpy.init(args=args)
                    movement_controller = SnakeMovementController()
                
                    # Start the GUI
                    app = QApplication([])
                    gui = ControlGUI(movement_controller)
                    gui.show()
                
                    # Spin ROS node in a separate thread
                    import threading
                    ros_thread = threading.Thread(target=rclpy.spin, args=(movement_controller,), daemon=True)
                    ros_thread.start()
                
                    app.exec()
                    rclpy.shutdown()
                
                
                if __name__ == '__main__':
                    main()
                

